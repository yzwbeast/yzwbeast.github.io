[{"content":"1. Learn a Programming Language It doesn’t matter what language you pick, but it is important to learn at least one. You will be able to use that language to write automation scripts.\narticle Guide to Picking a Language for DevOps The guide recommends Python or Go for programming languages and Bash or PowerShell Core for shell scripting in DevOps. Python is versatile, widely used for automation and tools, while Go is crucial for container technologies like Kubernetes and Docker. Bash is ideal for Linux environments, and PowerShell Core is cross-platform, suitable for Windows and Linux. For more details, check the full guide here.\n◇Python Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python’s extensive standard library and vast ecosystem of third-party packages make it suitable for a wide range of applications, from web development and data analysis to artificial intelligence and scientific computing. Its clean syntax and dynamic typing allow for rapid development and prototyping. Python’s “batteries included” philosophy provides rich built-in functionalities, while its cross-platform compatibility ensures code portability. With strong community support and continuous development, Python has become one of the most popular programming languages, widely used in academia, industry, and open-source projects for tasks ranging from simple scripting to complex software development.\nroadmap Visit Dedicated Python Roadmap official Python Website article Automate the Boring Stuff article Python Crash Course video Python Full Course for free feed Explore top posts about Python ◇Go Go, also known as Golang, is a statically typed, compiled programming language developed by Google. It emphasizes simplicity, efficiency, and built-in concurrency support. Go features fast compilation, garbage collection, and a robust standard library. Its syntax is clean and concise, promoting easy readability and maintainability. Go’s goroutines and channels provide powerful tools for concurrent programming. The language is particularly well-suited for system programming, network services, and cloud-native applications. Go’s efficient memory usage and quick execution make it popular for building scalable server-side applications and microservices. With its focus on simplicity and performance, Go has gained significant adoption in DevOps tooling, containerization technologies, and cloud infrastructure projects.\nroadmap Visit Dedicated Go Roadmap official A Tour of Go – Go Basics official Go Reference Documentation article Go by Example - annotated example programs article Making a RESTful JSON API in Go video Go in 100 Seconds feed Explore top posts about Golang 2. Operating System ◇Ubuntu/Debian(Linux) Ubuntu and Debian are both popular Linux distributions, with Debian serving as the upstream base for Ubuntu. Debian is known for its stability, extensive package repository, and rigorous testing process, making it a favored choice for servers and systems requiring long-term support. Ubuntu, derived from Debian, aims to provide a more user-friendly experience with regular releases, a focus on ease of use, and commercial support options. It features a more streamlined installation process, extensive documentation, and an active community. Both distributions use the Debian package management system (APT) and share many underlying technologies, but Ubuntu emphasizes a more polished desktop experience and rapid release cycle.\ncourse Practice Linux Commands with Hands-on Labs” official Debian Website official Ubuntu Website video How to use Ubuntu video Debian 12 Tutorial for Beginners feed Explore top posts about Ubuntu ◇RHEL/Derivatives(Linux) Red Hat Enterprise Linux (RHEL) is a popular distribution of the Linux operating system that is designed for enterprise-level use. It is developed and maintained by Red Hat, Inc., and it is available under a subscription-based model. There are several distributions of Linux that are based on RHEL, or that have been derived from RHEL in some way. These distributions are known as RHEL derivatives. Some examples of RHEL derivatives include: AlmaLinux, CentOS, CloudLinux, Oracle Linux, and Scientific Linux. RHEL derivatives are often used in enterprise environments because they offer the stability and reliability of RHEL, but with the added benefit of being free or lower-cost alternatives.\nofficial Red Hat Enterprise Linux Website official RHEL Documentation article Learn Linux 101 video What is Red Hat Enterprise Linux? ◇FreeBSD(Unix) FreeBSD is a free, open-source Unix-like operating system descended from the Berkeley Software Distribution (BSD). Known for its stability, performance, and advanced networking capabilities, FreeBSD is popular for server environments, embedded systems, and as a basis for network appliances. It features a monolithic kernel, a comprehensive set of userland utilities, and a ports collection for easy software installation. FreeBSD supports a wide range of architectures and includes advanced features like the ZFS file system, jails for containerization, and the pf packet filter. While less common in desktop environments, it’s widely used in internet infrastructure, storage systems, and by companies requiring a robust, customizable OS with a permissive license.\nofficial FreeBSD official FreeBSD Resources for Newbies official FreeBSD Documentation official FreeBSD Handbook video FreeBSD in 100 Seconds 3. Terminal Knowledge ◇Scripting: Bash Bash (Bourne Again Shell) is a powerful Unix shell and command language interpreter, serving as the default shell for most Linux distributions and macOS. It provides a command-line interface for interacting with the operating system, executing commands, and automating tasks through shell scripts. Bash supports variables, control structures, functions, and command substitution, making it versatile for system administration, DevOps tasks, and general-purpose scripting. Its ability to pipe commands, redirect input/output, and utilize a vast array of built-in commands and utilities makes it an essential tool for developers and system administrators in managing and automating workflows in Unix-like environments.\ncourse Bash Scripting Tutorial for Beginners article Interactive Shell Scripting Tutorial article Bash Scripting Tutorial video Bash in 100 Seconds feed Explore top posts about Bash ◇Editors: Vim, Nano, Emacs Text editors are software tools used for creating, editing, and managing text files. They range from simple editors with basic features to complex Integrated Development Environments (IDEs). Popular text editors include:\nNotepad: A basic editor for Windows, suitable for simple text files.\nVim: A highly configurable and powerful editor known for its efficiency and modal interface.\nEmacs: A versatile editor with extensive customization options and a wide range of plugins.\nSublime Text: A feature-rich editor with a focus on speed and a user-friendly interface.\nVisual Studio Code: A modern, open-source editor with built-in support for debugging, extensions, and integration with various development tools.\nofficial Vim\nofficial GNU Nano\nofficial GNU Emacs\narticle Vim Adventures\nvideo Vim Tutorial for Beginners\nvideo Linux Crash Course - nano\nvideo The Absolute Beginner’s Guide to Emacs\n◇Process Monitoring Process monitoring is the continuous observation and analysis of processes within an IT system or organization to ensure optimal performance, efficiency, and compliance. It involves tracking key metrics, resource utilization, and behaviors of individual processes or applications running on a system. This practice helps identify anomalies, bottlenecks, or potential issues before they impact overall system performance or user experience. Process monitoring tools typically provide real-time data on CPU usage, memory consumption, I/O operations, and thread activity. They often include features for alerting, logging, and visualization of process data. In modern IT environments, process monitoring is crucial for maintaining system stability, optimizing resource allocation, troubleshooting performance issues, and supporting capacity planning in complex, distributed systems.\nLsof lists on its standard output file information about files opened by processes.\narticle lsof Cheat Sheet article lsof Documentation video Linux Crash Course - The lsof Command feed Explore top posts about Monitoring ◇Performance Monitoring Performance monitoring is the systematic observation and measurement of an IT system’s operational efficiency and effectiveness. It involves collecting, analyzing, and reporting on key performance indicators (KPIs) across various components including applications, networks, servers, and databases. This process uses specialized tools to track metrics such as response time, throughput, resource utilization, and error rates. Performance monitoring helps identify bottlenecks, predict potential issues, and optimize system resources. It’s crucial for maintaining service level agreements (SLAs), ensuring user satisfaction, and supporting capacity planning. In modern IT environments, performance monitoring often incorporates real-time analytics, AI-driven insights, and automated alerting systems, enabling proactive management of complex, distributed systems and supporting continuous improvement in IT operations and service delivery.\narticle Linux Commands: Exploring Virtual Memory with vmstat article VMstat Man Page article vmstat tutorial feed Explore top posts about Monitoring ◇Networking Tools Networking tools are essential software utilities used for monitoring, analyzing, troubleshooting, and managing computer networks. They include a wide range of applications such as Wireshark for deep packet analysis, Nmap for network scanning and security auditing, Ping for testing basic connectivity, Traceroute for visualizing network paths, Netstat for displaying network connections, Tcpdump for command-line packet capture, Iperf for performance testing, Netcat for various network operations, Nslookup/Dig for DNS queries, and PuTTY for remote access via SSH or telnet. These tools collectively enable network administrators and security professionals to diagnose issues, optimize performance, conduct security assessments, and maintain the overall health and efficiency of network infrastructures, ranging from small local networks to large-scale enterprise environments.\narticle 10 SCP command examples article SCP command explained video Top 5 Linux Networking Commands video 60 Linux Commands you NEED to know ◇Text Manipulation Text manipulation tools are utilities or software that enable users to modify, process, and transform text data efficiently. These tools are often used in scripting, data cleaning, and automation tasks. Common text manipulation tools include sed (stream editor) for search and replace, awk for pattern scanning and data extraction, and grep for searching text using regular expressions. Other popular tools include cut, sort, tr, and uniq for various text processing functions. These command-line tools are commonly used in UNIX/Linux environments to handle large text files, automate workflows, and perform complex text transformations.\narticle Linux Text Processing Command video Learning Awk Is Essential For Linux Users 4. Version Control Systems Version control systems (VCS) are tools that track changes to code and files over time, enabling multiple users to collaborate on projects, maintain history, and manage different versions of codebases. They help in tracking modifications, merging changes, and resolving conflicts. There are two main types of VCS: centralized and distributed. Centralized systems (like Subversion and CVS) rely on a single central repository, while distributed systems (like Git and Mercurial) allow each user to have a complete copy of the repository, including its history. Distributed VCSs, such as Git, are particularly popular for their flexibility, branching capabilities, and robust support for collaborative workflows.\nroadmap Visit Dedicated Git \u0026amp; GitHub Roadmap official Git official Mecurial official Subversion article What is Version Control? video Version Control System (VCS) ◇Git Git is a distributed version control system designed to track changes in source code during software development. It allows multiple developers to work on the same project simultaneously, maintaining a complete history of modifications. Git features local repositories on each developer’s machine, enabling offline work and fast operations. It supports non-linear development through branching and merging, facilitating parallel work streams. Git’s distributed nature enhances collaboration, backup, and experimentation. Key concepts include commits, branches, merges, and remote repositories. With its speed, flexibility, and robust branching and merging capabilities, Git has become the standard for version control in modern software development, powering platforms like GitHub and GitLab.\nroadmap Visit Dedicated Git \u0026amp; GitHub Roadmap course Git by Example - Learn Version Control with Bite-sized Lessons article Learn Git with Tutorials, News and Tips - Atlassian article Git Cheat Sheet video Git \u0026amp; GitHub Crash Course For Beginners feed Explore top posts about Git 5. VCS Hosting When working on a team, you often need a remote place to put your code so others can access it, create their own branches, and create or review pull requests. These services often include issue tracking, code review, and continuous integration features. A few popular choices are GitHub, GitLab, BitBucket, and AWS CodeCommit.\nofficial GitHub official GitLab official BitBucket video Github vs Gitlab vs Bitbucket - Which Is Better? ◇GitHub GitHub is a web-based platform for version control and collaboration using Git. It provides cloud-based Git repository hosting, offering features like bug tracking, task management, and project wikis. GitHub facilitates code review through pull requests, supports issue tracking, and enables social coding with features like forking and starring repositories. It offers both public and private repositories, making it popular for open-source projects and private development. GitHub’s ecosystem includes integrations with various development tools and CI/CD platforms. With features like GitHub Actions for automation, GitHub Packages for package management, and GitHub Pages for web hosting, it serves as a comprehensive platform for software development workflows, fostering collaboration among developers worldwide.\nroadmap Visit Dedicated Git \u0026amp; GitHub Roadmap official GitHub article How to Use Git in a Professional Dev Team video What is GitHub? feed Explore top posts about GitHub 6. Containers Containers are lightweight, portable, and isolated environments that package applications and their dependencies, enabling consistent deployment across different computing environments. They encapsulate software code, runtime, system tools, libraries, and settings, ensuring that the application runs the same regardless of where it’s deployed. Containers share the host operating system’s kernel, making them more efficient than traditional virtual machines. Popular containerization platforms like Docker provide tools for creating, distributing, and running containers. This technology supports microservices architectures, simplifies application deployment, improves scalability, and enhances DevOps practices by streamlining the development-to-production pipeline and enabling more efficient resource utilization.\narticle What are Containers? article What is a Container? article Containers - The New Stack video What are Containers? feed Explore top posts about Containers ◇Docker Docker is an open-source platform that automates the deployment, scaling, and management of applications using containerization technology. It enables developers to package applications with all their dependencies into standardized units called containers, ensuring consistent behavior across different environments. Docker provides a lightweight alternative to full machine virtualization, using OS-level virtualization to run multiple isolated systems on a single host. Its ecosystem includes tools for building, sharing, and running containers, such as Docker Engine, Docker Hub, and Docker Compose. Docker has become integral to modern DevOps practices, facilitating microservices architectures, continuous integration/deployment pipelines, and efficient resource utilization in both development and production environments.\nroadmap Visit Dedicated Docker Roadmap official Docker Documentation video Docker Tutorial video Docker simplified in 55 seconds feed Explore top posts about Docker 7. Web Services \u0026amp; Proxy Configuration Learn how to setup:\nForward Proxy Reverse Proxy Load Balancer Firewall Caching Server Web Server ◇Forward Proxy A forward proxy, often simply called a proxy, is a server that sits between client devices and the internet, forwarding requests from clients to web servers. It acts on behalf of clients, potentially providing benefits like anonymity, security, and access control. Forward proxies can cache frequently requested content, filter web traffic, bypass geographical restrictions, and log user activity. They’re commonly used in corporate networks to enforce internet usage policies, enhance security by hiding internal network details, and improve performance through caching. Unlike reverse proxies, which serve resources on behalf of servers, forward proxies primarily serve client-side needs, acting as an intermediary for outbound requests to the wider internet.\narticle What is Forward Proxy? article Forward vs Reverse Proxy video Understanding Proxy, Forward Proxy, and Reverse Proxy ◇Reverse Proxy A reverse proxy is a server that sits between client devices and backend servers, intercepting requests from clients and forwarding them to appropriate backend servers. It acts on behalf of the servers, providing benefits such as load balancing, caching, SSL termination, and security. Reverse proxies can distribute incoming traffic across multiple servers to improve performance and reliability, cache frequently requested content to reduce server load, handle SSL encryption and decryption to offload this task from backend servers, and provide an additional layer of security by hiding server details. Common uses include improving web application performance, enabling microservices architectures, and enhancing security in web hosting environments. Popular reverse proxy software includes NGINX, HAProxy, and Apache with mod_proxy.\narticle What is Reverse Proxy? article NGINX Documentation article Understanding NGINX as a Reverse Proxy video Proxy vs Reverse Proxy (Real-world Examples) ◇Caching Server A caching server, also known as a proxy server or cache server, is a dedicated network server that saves web pages and other Internet content locally to reduce bandwidth usage, server load, and perceived lag. It works by intercepting requests from clients, saving the responses from web servers, and serving cached content to subsequent requests for the same information. Caching servers can significantly improve response times and reduce network traffic, especially for frequently accessed content. They are commonly used in content delivery networks (CDNs), enterprise networks, and Internet service providers to optimize performance, reduce costs, and enhance user experience by serving content from a location closer to the end-user.\narticle What is Caching? article What is Cache Server? article Site Cache vs Browser Cache vs Server Cache video Cache Systems Every Developer Should Know ◇Firewall Firewall is a network security device that monitors and filters incoming and outgoing network traffic based on an organization’s previously established security policies. It is a barrier that sits between a private internal network and the public Internet. A firewall’s main purpose is to allow non-threatening traffic in and to keep dangerous traffic out.\narticle What is Firewall? article Types of Firewall article Uncomplicated Firewall (UFW) article Why do we need Firewalls? video Firewalls and Network Security - SimpliLearn feed Explore top posts about Firewall ◇Load Balancer Load Balancer acts as the traffic cop sitting in front of your servers and routing client requests across all servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization and ensures that no one server is overworked. If one of the servers goes down, the load balancer redirects traffic to the remaining online servers.\narticle What is Load Balancing? article Load Balancing concepts and algorithms article NGINX Reverse Proxy and Load Balancing video What is a Load Balancer? ◇Nginx(Web Servers) NGINX is a high-performance, open-source web server, reverse proxy, and load balancer. Known for its efficiency in handling concurrent connections, NGINX uses an event-driven, asynchronous architecture that consumes minimal resources. It excels at serving static content, proxying requests to application servers, and load balancing across multiple backends. NGINX is widely used for its ability to improve website performance, scalability, and security. It supports various protocols including HTTP, HTTPS, SMTP, and WebSocket, and offers features like SSL/TLS termination, caching, and content compression. Popular in both small-scale and enterprise environments, NGINX is a key component in many modern web architectures, particularly in microservices and containerized deployments.\nofficial Nginx article Basic NGINX Setup on Ubuntu: Guide to a Functional and Secure Website Serving video NGINX Explained in 100 Seconds feed Explore top posts about Nginx 8. Networking \u0026amp; Protocols Networking protocols are standardized rules and procedures that govern how data is transmitted, received, and interpreted across computer networks. They define the format, timing, sequencing, and error control in data communication. Key protocols include:\nTCP/IP (Transmission Control Protocol/Internet Protocol): The fundamental suite for Internet communication.\nHTTP/HTTPS: For web browsing and secure data transfer on the web.\nFTP/SFTP: File transfer protocols.\nSMTP/POP3/IMAP: Email communication protocols.\nDNS: For domain name resolution.\nDHCP: For automatic IP address assignment.\nSSL/TLS: For secure, encrypted communication.\nUDP: For fast, connectionless data transmission.\narticle Cloudflare - What is SSL?\narticle Cloudflare - What is TLS?\narticle Everything you need to know about HTTP\narticle What is HTTP?\narticle What is HTTPS?\narticle What is DNS?\nvideo DNS and How does it Work?\nvideo DNS Records\nvideo SSH vs SSL vs TLS\nvideo OpenSSH Full Guide\n◇FTP/SFTP(File Transfer) FTP (File Transfer Protocol) is a standard network protocol used for transferring files between a client and a server on a computer network. It operates on a client-server model, typically using separate control and data connections between the client and server. FTP allows users to upload, download, and manage files on remote systems, supporting both authenticated and anonymous access. While widely used for its simplicity and compatibility, FTP has security limitations as it transmits data and credentials in plain text. As a result, more secure alternatives like SFTP (SSH File Transfer Protocol) and FTPS (FTP Secure) have gained popularity for sensitive data transfers. Despite its age, FTP remains in use for various file transfer needs, especially in legacy systems and where security is less critical.\nSFTP (SSH File Transfer Protocol) is a secure file transfer protocol that provides file access, transfer, and management functionalities over a secure shell (SSH) data stream. It’s designed as an extension of SSH to offer secure file transfer capabilities. SFTP encrypts both commands and data in transit, protecting against eavesdropping and man-in-the-middle attacks. Unlike traditional FTP, SFTP uses a single connection and doesn’t separate control and data channels. It supports features like resuming interrupted transfers, directory listings, and remote file removal. SFTP is widely used in enterprise environments for secure file transfers, automated scripts, and as a more secure alternative to FTP. Its integration with SSH makes it a preferred choice for system administrators and developers working with remote systems securely.\narticle FTP vs SFTP vs FTPS article What is SFTP? ◇DNS(Domain Services) DNS (Domain Name System) is a hierarchical, decentralized naming system for computers, services, or other resources connected to the Internet or a private network. It translates human-readable domain names (like www.example.com) into IP addresses (like 192.0.2.1) that computers use to identify each other on the network. DNS serves as the internet’s phone book, enabling users to access websites using easy-to-remember names instead of numerical IP addresses. The system comprises DNS servers, resolvers, and records (like A, CNAME, MX), working together to route internet traffic efficiently. DNS is crucial for internet functionality, affecting everything from web browsing and email to load balancing and service discovery in modern cloud architectures.\narticle What is DNS? article How DNS Works (comic) video DNS and How does it Work? feed Explore top posts about DNS ◇HTTP(Web Communication) HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the World Wide Web. It’s an application-layer protocol that enables the transfer of various types of data, primarily web pages and their components, between clients (usually web browsers) and servers. HTTP operates on a request-response model, where clients send requests for resources, and servers respond with the requested data or error messages. It’s stateless by design, meaning each request is independent of previous ones. HTTP supports various methods (GET, POST, PUT, DELETE, etc.) for different types of operations. While originally designed for plain-text transmission, HTTPS, its secure version using encryption, is now widely adopted to protect data in transit.\narticle Everything you need to know about HTTP article What is HTTP? article An overview of HTTP video HTTP/1 to HTTP/2 to HTTP/3 video HTTP Crash Course \u0026amp; Exploration ◇HTTPS(Web Communication) HTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP, encrypting data exchanged between a client and a server. It uses SSL/TLS protocols to provide authentication, data integrity, and confidentiality. HTTPS prevents eavesdropping, tampering, and man-in-the-middle attacks by encrypting all communications. It uses digital certificates to verify the identity of websites, enhancing trust and security. HTTPS is crucial for protecting sensitive information like login credentials and financial data. It has become the standard for secure web communication, with major browsers marking non-HTTPS sites as “not secure.” HTTPS also provides SEO benefits and is essential for many modern web features and progressive web applications.\narticle What is HTTPS? article Why HTTPS Matters article Enabling HTTPS on Your Servers article How HTTPS works (comic) video Does HTTPS REALLY Keep You Safe? ◇SSL/TLS(Web Communication) Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols used to provide security in internet communications. These protocols encrypt the data that is transmitted over the web, so anyone who tries to intercept packets will not be able to interpret the data. One difference that is important to know is that SSL is now deprecated due to security flaws, and most modern web browsers no longer support it. But TLS is still secure and widely supported, so preferably use TLS.\narticle Cloudflare - What is SSL? article Cloudflare - What is TLS? article Wikipedia - SSL/TLS video SSH vs SSL vs TLS video SSL/TLS Explained in 7 Minutes ◇SSH(Web Communication) SSH (Secure Shell) is a cryptographic network protocol used to securely access and manage remote machines over an unsecured network. It provides encrypted communication, ensuring confidentiality and integrity, and allows for secure file transfers, command execution, and tunneling. SSH is widely used for remote administration of servers, cloud infrastructure, and networking devices, typically employing key-based authentication or passwords. Tools like OpenSSH are commonly used to establish SSH connections, providing a secure alternative to older, less secure protocols like Telnet.\nofficial What is SSH? article SSH Intro article SFTP using SSH video How SSH Works feed Explore top posts about SSH ◇OSI Model The OSI (Open Systems Interconnection) model is a conceptual framework that standardizes the functions of a telecommunication or computing system into seven abstraction layers. These layers, from bottom to top, are: Physical, Data Link, Network, Transport, Session, Presentation, and Application. Each layer serves a specific purpose in the process of data communication, with lower layers handling more hardware-oriented tasks and upper layers dealing with software and user-interface aspects. The model helps in understanding how data moves through a network, troubleshooting network issues, and designing network protocols and hardware. While not strictly adhered to in real-world implementations, the OSI model remains a valuable educational tool and reference point for network engineers and developers, providing a common language for discussing network operations and architecture.\narticle What is OSI Model? video OSI Model video OSI vs TCP/IP Model ◇White/Grey Listing(Email Protocols) Whitelisting involves creating a list of trusted entities (such as IP addresses, email addresses, or applications) that are explicitly allowed to access a system or send messages. Anything not on the whitelist is denied by default. Whitelisting offers a high level of security by limiting access to only known and approved entities, but it can be inflexible and require frequent updates to accommodate legitimate changes. Greylisting is a more flexible approach used primarily in email filtering. When an email is received from an unknown sender, the server temporarily rejects it with a “try again later” response. Legitimate mail servers will retry sending the email after a short delay, while spammers, which often do not retry, are blocked. This method reduces spam by taking advantage of the fact that spammers usually do not follow retry mechanisms. Greylisting can be less intrusive than whitelisting, but it may introduce slight delays in email delivery for first-time senders.\narticle Detailed Introduction to greylisting video Greylisting video How to Whitelist an Email Address? ◇SMTP(Email Protocols) Email is emerging as one of the most valuable services on the internet today. Most internet systems use SMTP as a method to transfer mail from one user to another. SMTP is a push protocol and is used to send the mail whereas POP (post office protocol) or IMAP (internet message access protocol) are used to retrieve those emails at the receiver’s side. SMTP is an application layer protocol. The client who wants to send the mail opens a TCP connection to the SMTP server and then sends the mail across the connection. The SMTP server is an always-on listening mode. As soon as it listens for a TCP connection from any client, the SMTP process initiates a connection through port 25. After successfully establishing a TCP connection the client process sends the mail instantly.\narticle What is SMTP? - Cloudflare article SMTP - Wikipedia video What is SMTP and how does it work? feed Explore top posts about Serverless ◇DMARC(Email Protocols) DMARC (Domain-based Message Authentication, Reporting, and Conformance) is an email authentication protocol that builds upon SPF and DKIM to protect against email spoofing and phishing attacks. It allows domain owners to specify how email receivers should handle messages that fail authentication checks. DMARC provides a feedback mechanism for domain owners to receive reports on email authentication results, helping them monitor and improve their email security. By implementing DMARC policies, organizations can enhance their email deliverability, protect their brand reputation, and reduce the likelihood of their domain being used in fraudulent email campaigns. DMARC is widely adopted by major email providers and is considered a crucial component of modern email security strategies.\nofficial DMARC video What is DMARC: Email Security You Need to Know About feed Explore top posts about Security ◇IMAP(Email Protocols) IMAP (Internet Message Access Protocol) is a standard email protocol that allows email clients to access messages stored on a mail server. Unlike POP3, IMAP keeps emails on the server, enabling access from multiple devices while maintaining synchronization. It supports folder structures, message flagging, and partial message retrieval, making it efficient for managing large volumes of emails. IMAP allows users to search server-side, reducing bandwidth usage. It’s designed for long-term mail storage on the server, ideal for users who need to access their email from various devices or locations. IMAP’s synchronization capabilities and server-side management features make it the preferred protocol for most modern email systems, especially in mobile and multi-device environments.\narticle Wikipedia: Internet Message Access Protocol video What are POP3, IMAP, and SMTP? ◇SPF(Email Protocols) Sender Policy Framework (SPF) is used to authenticate the sender of an email. With an SPF record in place, Internet Service Providers can verify that a mail server is authorized to send email for a specific domain. An SPF record is a DNS TXT record containing a list of the IP addresses that are allowed to send email on behalf of your domain.\narticle What is a DNS SPF record? video What is SPF? Sender Policy Framework Explained ◇POP3S(Email Protocols) POP3 (port 110) or POP3s (port 995) stands for The Post Office Protocol. It’s an Internet standard protocol used by local email software clients to retrieve emails from a remote mail server over a TCP/IP connection. Email servers hosted by Internet service providers also use POP3 to receive and hold emails intended for their subscribers. Periodically, these subscribers will use email client software to check their mailbox on the remote server and download any emails addressed to them. Once the email client has downloaded the emails, they are usually deleted from the server, although some email clients allow users to specify that mails be copied or saved on the server for a period of time.\narticle What is POP3? video What are POP3, IMAP, and SMTP? ◇Domain Keys(Email Protocols) DomainKeys is an email authentication method designed to verify the domain of an email sender and ensure message integrity. Developed by Yahoo, it was a precursor to DKIM (DomainKeys Identified Mail). DomainKeys uses public key cryptography to allow email systems to verify that a message was sent by an authorized sender and hasn’t been tampered with in transit. The sending server signs outgoing emails with a private key, and receiving servers can verify the signature using a public key published in the sender’s DNS records. While largely superseded by DKIM, DomainKeys played a crucial role in the evolution of email authentication techniques aimed at combating email spoofing and phishing attacks.\narticle DomainKeys Identified Mail video What is DKIM? DomainKeys Identified Mail 9. Cloud Providers Cloud providers provide a layer of APIs to abstract infrastructure and provision it based on security and billing boundaries. The cloud runs on servers in data centers, but the abstractions cleverly give the appearance of interacting with a single “platform” or large application. The ability to quickly provision, configure, and secure resources with cloud providers has been key to both the tremendous success and complexity of modern DevOps.\narticle Cloud Service Provider article What are Cloud Providers? feed Explore top posts about Cloud ◇AWS Amazon Web Services has been the market leading cloud computing platform since 2011, ahead of Azure and Google Cloud. AWS offers over 200 services with data centers located all over the globe. AWS service is an online platform that provides scalable and cost-effective cloud computing solutions. It is broadly adopted cloud platform that offers several on-demand operations like compute power, database storage, content delivery and so on.\ncourse 100 hour AWS Complete Course 2024 official AWS Website official AWS Cloud Essentials official Overview of Amazon Web Services article Create an AWS account feed Explore top posts about AWS ◇Azure Microsoft Azure is a comprehensive cloud computing platform offering a wide array of services for building, deploying, and managing applications through Microsoft-managed data centers. It provides Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS) solutions, supporting various programming languages, tools, and frameworks, including both Microsoft-specific and third-party systems. Azure’s services span computing, analytics, storage, networking, and more, enabling businesses to scale and transform their operations, leverage AI and machine learning, and implement robust security measures, all while potentially reducing IT costs through its pay-as-you-go pricing model.\nofficial Azure Website OpenSource Microsoft Azure Guide video Microsoft Azure Fundamentals Certification Course (AZ-900) feed Explore top posts about Azure ◇Google Cloud Google Cloud is Google’s cloud computing service offering, providing over 150 products/services to choose from. It consists of a set of physical assets, such as computers and hard disk drives, and virtual resources, such as virtual machines(VMs), that are contained in Google’s data centers. It runs on the same infrastructure that Google uses internally for its end-user products, such as Search, Gmail, Google Drive, and YouTube.\nofficial Google Cloud article 5 Tips to Become a Google Cloud Certified Professional Architect video Google Cloud Platform Full Course 2023 feed Explore top posts about Cloud 10. Serverless Serverless is a cloud-computing execution model where the cloud provider dynamically manages the infrastructure, allowing developers to focus solely on writing code. In this model, resources are automatically allocated and scaled based on demand, and billing is based on actual usage rather than pre-purchased capacity. Serverless architectures are often used for event-driven workloads and microservices, improving development efficiency and reducing operational overhead. Popular platforms for serverless computing include AWS Lambda, Azure Functions, and Google Cloud Functions.\narticle What is Serverless? video What is Serverless? feed Explore top posts about Serverless ◇AWS Lambda AWS Lambda is a serverless compute service that allows you to run code without provisioning or managing servers. It automatically scales, executes code in response to triggers, and charges only for the compute time consumed. Lambda supports multiple programming languages and integrates seamlessly with other AWS services, making it ideal for building microservices, automating tasks, and processing data streams with minimal operational overhead.\nofficial AWS Lambda Introduction video AWS Lambda Tutorial: Getting Started with Serverless Computing feed Explore top posts about AWS ◇Cloudflare Cloudflare is a internet company that provides a range of services to help protect and accelerate websites and applications. At its core, Cloudflare is a content delivery network (CDN) and a reverse proxy cloud provider. This means that it acts as an intermediary between a website’s origin server and its visitors, caching content and filtering out malicious traffic. Cloudflare was founded in July 2009 by Matthew Prince, Lee Holloway, and Michelle Zatlyn. The company was venture-capital funded and submitted its S-1 filing for IPO on the New York Stock Exchange in August 2019. It opened for public trading on September 13, 2019, at $15 per share.\nofficial Cloudflare video Introduction to Cloudflare feed Explore top posts about Cloudflare 11. Provisioning Provisioning refers to the process of setting up and configuring the necessary IT infrastructure to support an application or service. This includes allocating and preparing resources such as servers, storage, networking, and software environments. Provisioning can be done manually, but in modern DevOps practices, it’s typically automated using tools like Terraform, Pulumi, or CloudFormation. These tools allow for infrastructure-as-code, where the entire provisioning process is defined in version-controlled scripts or templates. This approach enables consistent, repeatable deployments across different environments, reduces human error, and facilitates rapid scaling and disaster recovery.\narticle What is provisioning? - RedHat article What is provisioning? - IBM video Open Answers: What is provisioning? ◇Terraform Terraform is an open-source infrastructure as code (IaC) tool developed by HashiCorp, used to define, provision, and manage cloud and on-premises infrastructure using declarative configuration files. It supports multiple cloud providers like AWS, Azure, and Google Cloud, as well as various services and platforms, enabling infrastructure automation across diverse environments. Terraform’s state management and modular structure allow for efficient scaling, reusability, and version control of infrastructure. It is widely used for automating infrastructure provisioning, reducing manual errors, and improving infrastructure consistency and repeatability.\nroadmap Visit Dedicated Terraform Roadmap course Complete Terraform Course official Terraform Documentation official Terraform Tutorials article How to Scale Your Terraform Infrastructure feed Explore top posts about Terraform 12. Configuration Management Configuration management is a systems engineering process for establishing consistency of a product’s attributes throughout its life. In the technology world, configuration management is an IT management process that tracks individual configuration items of an IT system. IT systems are composed of IT assets that vary in granularity. An IT asset may represent a piece of software, or a server, or a cluster of servers. The following focuses on configuration management as it directly applies to IT software assets and software asset CI/CD. Software configuration management is a systems engineering process that tracks and monitors changes to a software systems configuration metadata. In software development, configuration management is commonly used alongside version control and CI/CD infrastructure. This post focuses on its modern application and use in agile CI/CD software environments.\narticle What is Configuration Management? article What is configuration management? - RedHat video Why You Need to Learn Configuration Management ◇Ansible Ansible is an open-source automation tool used for configuration management, application deployment, and task automation. It simplifies the process of managing and orchestrating infrastructure by using a declarative language to define desired states and configurations. Ansible operates using YAML files, called playbooks, which describe the tasks to be executed on remote systems. It employs an agentless architecture, meaning it uses SSH or other remote protocols to execute tasks on target machines without requiring additional software to be installed. Ansible is widely used for automating repetitive tasks, ensuring consistency, and managing large-scale deployments across various environments.\ncourse Ansible Full Course for Beginners official Ansible Website video Ansible in 100 Seconds feed Explore top posts about Ansible 13. CI/CD Tools CI/CD is a method to frequently deliver apps to customers by introducing automation into the stages of app development. The main concepts attributed to CI/CD are continuous integration, continuous delivery, and continuous deployment. CI/CD is a solution to the problems integrating new code can cause for development and operations teams. Specifically, CI/CD introduces ongoing automation and continuous monitoring throughout the lifecycle of apps, from integration and testing phases to delivery and deployment. Taken together, these connected practices are often referred to as a “CI/CD pipeline” and are supported by development and operations teams working together in an agile way with either a DevOps or site reliability engineering (SRE) approach.\narticle CI vs CD article What is CI/CD? video DevOps CI/CD Explained in 100 Seconds video CI/CD In 5 Minutes feed Explore top posts about CI/CD ◇CircleCI CircleCI is a popular continuous integration and continuous delivery (CI/CD) platform that automates the build, test, and deployment processes of software projects. It supports a wide range of programming languages and integrates with various version control systems, primarily GitHub and Bitbucket. CircleCI uses a YAML configuration file to define pipelines, allowing developers to specify complex workflows, parallel job execution, and custom environments. It offers features like caching, artifact storage, and Docker layer caching to speed up builds. With its cloud-based and self-hosted options, CircleCI provides scalable solutions for projects of all sizes, helping teams improve code quality, accelerate release cycles, and streamline their development workflows.\nofficial CircleCI Website video CircleCI Tutorial for Beginners feed Explore top posts about CI/CD ◇GitLab CI GitLab CI is an integrated continuous integration and delivery platform within the GitLab ecosystem. It automates the process of building, testing, and deploying code changes through pipelines defined in YAML files. GitLab CI offers features like parallel execution, container registry integration, and auto-DevOps, enabling teams to implement robust CI/CD workflows directly from their GitLab repositories without additional tools or infrastructure.\nofficial GitLab Website official GitLab Documentation video GitLab CI/CD Pipeline Tutorial for Beginners (2024) feed Explore top posts about GitLab ◇GitHub Actions GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform integrated directly into GitHub repositories. It allows developers to automate software workflows, including building, testing, and deploying applications. Actions are defined in YAML files and triggered by various GitHub events such as pushes, pull requests, or scheduled tasks. The platform provides a marketplace of pre-built actions and supports custom actions. GitHub Actions offers matrix builds, parallel job execution, and supports multiple operating systems and languages. It integrates seamlessly with GitHub’s ecosystem, facilitating automated code review, issue tracking, and project management. This tool enables developers to implement DevOps practices efficiently within their GitHub workflow, enhancing productivity and code quality.\ncourse GitHub Actions Certification – Full Course to PASS the Exam official GitHub Actions Documentation video What is GitHub Actions? video Automate your Workflow with GitHub Actions feed Explore top posts about GitHub 14. Secret Management Secret management refers to the secure handling, storage, and distribution of sensitive information such as passwords, API keys, and certificates within an organization’s IT infrastructure. It involves using specialized tools and practices to protect secrets from unauthorized access while ensuring they are available to authorized systems and users when needed. Secret management solutions typically offer features like encryption at rest and in transit, access controls, auditing, rotation policies, and integration with various platforms and services. These systems aim to centralize secret storage, reduce the risk of exposure, automate secret lifecycle management, and provide seamless integration with applications and DevOps workflows. Effective secret management is crucial for maintaining security, compliance, and operational efficiency in modern, complex IT environments.\narticle How to Manage Secrets in Web Applications? article Why DevSecOps Teams Need Secrets Management videoDevOps Tricks for Managing Secrets in Production ◇Vault HashiCorp Vault is a tool designed for securely managing secrets and protecting sensitive data, such as passwords, API keys, and encryption keys. It provides centralized secrets management, access control, and auditing features. Vault supports various authentication methods and dynamic secrets, allowing it to generate secrets on-the-fly and manage their lifecycle. It also offers robust encryption capabilities, both for data at rest and in transit. Vault is widely used in DevOps environments to ensure secure and scalable management of sensitive information, integrating with various infrastructure and application platforms.\nofficial HashiCorp Vault OpenSource hashicorp/vault video HashiCorp Vault Explained in 180 seconds video HashiCorp Vault Tutorial for Beginners 15. Infrastructure Monitoring Monitoring refers to the practice of making the performance and status of infrastructure visible. This section contains common tools used for monitoring. This is a very vendor-heavy space - use caution when studying materials exclusively from a given product or project, as there are many conflicting opinions and strategies in use. There is no single solution for the most substantially complex internet-facing applications, so understanding the pros and cons of these tools will be useful in helping you plan how to monitor a system for a given goal.\narticle Best Practices to Optimize Infrastructure Monitoring within DevOps Teams article Seven Steps to Effective Cloud Native Infrastructure Monitoring video Infrastructure Monitoring Basics with Telegraf, Grafana and InfluxDB feed Explore top posts about Infrastructure ◇Prometheus Prometheus is an open-source systems monitoring and alerting toolkit designed for reliability and scalability. It features a multi-dimensional data model, a flexible query language (PromQL), and an efficient time series database. Prometheus collects metrics from configured targets at given intervals, evaluates rule expressions, displays results, and can trigger alerts when specified conditions are observed. It operates on a pull model, scraping metrics from HTTP endpoints, and supports service discovery for dynamic environments. Prometheus is particularly well-suited for monitoring microservices and containerized environments, integrating seamlessly with systems like Kubernetes. Its ecosystem includes various exporters for third-party systems and a built-in alert manager. Widely adopted in cloud-native architectures, Prometheus is a core component of modern observability stacks, often used alongside tools like Grafana for visualization.\nofficial Prometheus Website video Introduction to the Prometheus Monitoring System | Key Concepts and Features feed Explore top posts about Prometheus ◇Grafana Grafana is an open-source analytics and interactive visualization web application. It connects to various data sources, including time-series databases, relational databases, and cloud services, to create customizable dashboards. Grafana excels at visualizing time-series data for infrastructure and application analytics, supporting a wide range of chart types and plugins. It features alerting capabilities, user authentication, and role-based access control. Grafana is commonly used for monitoring system metrics, application performance, and business analytics. Its flexibility and ability to combine data from multiple sources make it popular in DevOps environments for creating comprehensive monitoring solutions. Grafana’s user-friendly interface and extensive customization options enable users to create visually appealing and informative dashboards for real-time data visualization and analysis.\nofficial Grafana official Grafana Webinars and Videos video Server Monitoring // Prometheus and Grafana Tutorial feed Explore top posts about Grafana\n◇Datadog Datadog is a monitoring and analytics platform for large-scale applications. It encompasses infrastructure monitoring, application performance monitoring, log management, and user-experience monitoring. Datadog aggregates data across your entire stack with 400+ integrations for troubleshooting, alerting, and graphing.\nofficial Datadog Website official Datadog Documentation feed Explore top posts about DevOps 16. Log Management Log management is the process of handling log events generated by all software applications and infrastructure on which they run. It involves log collection, aggregation, parsing, storage, analysis, search, archiving, and disposal, with the ultimate goal of using the data for troubleshooting and gaining business insights, while also ensuring the compliance and security of applications and infrastructure.\nofficial Log Management: What DevOps Teams Need to Know article Introduction to Logs Management article Logging for Kubernetes: What to Log and How to Log It\n◇Loki Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system designed by Grafana Labs. It’s purpose-built to be cost-effective and easy to operate, making it particularly well-suited for storing and querying logs from Kubernetes clusters. Loki indexes metadata about logs rather than the full text, which allows it to be more resource-efficient than traditional log management systems. It uses the same querying language as Prometheus (LogQL), making it easier for users familiar with Prometheus to adopt. Loki integrates seamlessly with Grafana for visualization and is often used alongside Prometheus and Grafana in cloud-native observability stacks. Its design focuses on simplicity, making it an attractive option for organizations looking for efficient log management in containerized environments.\nofficial Loki official Loki Documentation video Meet Grafana LOKI, a Log Aggregation System for EVERYTHING feed Explore top posts about Grafana\n◇Elastic Stack The Elastic Stack, formerly known as ELK Stack, is a set of open-source tools for searching, analyzing, and visualizing data in real-time. It consists of four main components: Elasticsearch (a distributed search and analytics engine), Logstash (a data processing pipeline), Kibana (a data visualization and management tool), and Beats (lightweight data shippers). Together, these tools enable users to collect data from various sources, process and enrich it, store it in a searchable format, and create interactive visualizations and dashboards. The Elastic Stack is widely used for log analytics, application performance monitoring, security information and event management (SIEM), and business intelligence applications, offering scalability and flexibility for handling large volumes of diverse data.\nofficial Elastic Stack article Logstash vs Fluentd video Master the Elastic Stack: Elastic Stack Overview feed Explore top posts about ELK 17. Container Orchestration Container orchestration is the process of managing and automating the lifecycle of containers, including their deployment, scaling, and networking across multiple hosts. It is a critical technology for running complex containerized applications in production environments.\nBy leveraging tools like Kubernetes, Docker Swarm, and Apache Mesos, organizations can ensure high availability, scalability, and reliability for their applications. Container orchestration simplifies operations by automating routine tasks and providing a robust foundation for microservices, cloud-native development, and DevOps practices.\narticle What is Container Orchestration? article What is Kubernetes? article Docker Swarm video Introduction to Kubernetes ◇Kubernetes Kubernetes is an open source container management platform, and the dominant product in this space. Using Kubernetes, teams can deploy images across multiple underlying hosts, defining their desired availability, deployment logic, and scaling logic in YAML. Kubernetes evolved from Borg, an internal Google platform used to provision and allocate compute resources (similar to the Autopilot and Aquaman systems of Microsoft Azure). The popularity of Kubernetes has made it an increasingly important skill for the DevOps Engineer and has triggered the creation of Platform teams across the industry. These Platform engineering teams often exist with the sole purpose of making Kubernetes approachable and usable for their product development colleagues.\nroadmap Visit Dedicated Kubernetes Roadmap official Kubernetes Website OpenSource kubernetes/kubernetes article Primer: How Kubernetes Came to Be, What It Is, and Why You Should Care article Kubernetes: An Overview video Complete Kubernetes Course - From BEGINNER to PRO feed Explore top posts about Kubernetes 18. Application Monitoring Application monitoring involves the continuous observation and analysis of software applications to ensure they perform optimally, identify issues, and provide insights into their operation. This process includes tracking metrics such as response times, error rates, resource utilization (CPU, memory, and disk), and transaction performance. Application monitoring tools collect and analyze data to detect anomalies, provide alerts for potential problems, and offer detailed insights into application behavior and performance. By monitoring applications, organizations can proactively address issues, optimize performance, and improve user experience, ultimately ensuring reliability and efficiency in their software systems.\narticle Applying Basic vs. Advanced Monitoring Techniques article Why Legacy Apps Need Your Monitoring Love, Too video Application Monitoring - 4 Golden Signals feed Explore top posts about Monitoring ◇OpenTelemetry OpenTelemetry is an open-source observability framework for cloud-native software, providing a standardized way to collect and export telemetry data such as metrics, logs, and traces. It aims to make observability a built-in feature of cloud-native applications by offering a vendor-neutral, unified set of APIs, libraries, agents, and instrumentation. OpenTelemetry simplifies the implementation of observability across different languages and platforms, enabling developers to instrument their code once and send data to multiple backends. It supports automatic instrumentation for many popular frameworks and libraries, reducing the effort required to add observability to applications. By providing a consistent approach to data collection and export, OpenTelemetry facilitates better interoperability between observability tools and platforms in modern, distributed software environments.\nofficial OpenTelemetry Website official OpenTelemetry Documentation video What is OpenTelemetry? video OpenTelemetry Course - Understand Software Performance 19. Artifact Management In software development, artifacts are various outputs produced throughout the development lifecycle, including source code, binaries, documentation, configuration files, build outputs, and test results. These artifacts are essential for managing, deploying, and maintaining applications, as they provide the necessary resources and documentation for development, testing, and production environments. They help track the progress of a project, ensure consistency, and facilitate the efficient delivery and operation of software systems.\narticle What are Artifacts - Oracle article What is an Artifact - Atlassian video Learn about GitLab Artifacts and Cache ◇Artifactory Artifactory is a universal DevOps solution for hosting, managing, and distributing binaries and artifacts. Any type of software in binary form – such as application installers, container images, libraries, configuration files, etc. – can be curated, secured, stored, and delivered using Artifactory. The name “Artifactory” reflects the fact that it can host any type of “artifact” needed in your software development “factory.” In software development, an artifact is any object produced during the software development and delivery process. Artifacts include the files used to install and run applications, as well as any complementary information necessary to configure or manage software. Artifactory serves as the central hub for your DevOps processes. All artifacts, dependencies, packages, etc. ultimately get put into and pulled from Artifactory.\nofficial Artifactory Website video Key Features of JFrog Artifactory in 5 Minutes feed Explore top posts about Artifactory 20. GitOps GitOps is a paradigm for managing infrastructure and application deployments using Git as the single source of truth. It extends DevOps practices by using Git repositories to store declarative descriptions of infrastructure and applications. Changes to the desired state are made through pull requests, which trigger automated processes to align the actual state with the desired state. GitOps relies on continuous deployment tools that automatically reconcile the live system with the desired state defined in Git. This approach provides benefits such as version control for infrastructure, improved auditability, easier rollbacks, and enhanced collaboration. GitOps is particularly well-suited for cloud-native applications and Kubernetes environments, offering a streamlined method for managing complex, distributed systems.\narticle Guide to GitOps video What is GitOps, How GitOps works and Why it’s so useful feed Explore top posts about GitOps ◇ArgoCD Argo CD is a continuous delivery tool for Kubernetes that is based on the GitOps methodology. It is used to automate the deployment and management of cloud-native applications by continuously synchronizing the desired application state with the actual application state in the production environment. In an Argo CD workflow, changes to the application are made by committing code or configuration changes to a Git repository. Argo CD monitors the repository and automatically deploys the changes to the production environment using a continuous delivery pipeline. The pipeline is triggered by changes to the Git repository and is responsible for building, testing, and deploying the changes to the production environment.Argo CD is designed to be a simple and efficient way to manage cloud-native applications, as it allows developers to make changes to the system using familiar tools and processes and it provides a clear and auditable history of all changes to the system. It is often used in conjunction with tools such as Helm to automate the deployment and management of cloud-native applications.\nofficial Argo CD - Argo Project video ArgoCD Tutorial for Beginners video What is ArgoCD feed Explore top posts about ArgoCD 21. Service Mesh A service mesh is a dedicated infrastructure layer that manages communication between microservices in a distributed application. It provides features like load balancing, service discovery, encryption, observability, and traffic management, allowing services to communicate securely and efficiently. By abstracting network-related concerns from the application code, a service mesh enhances reliability and security while simplifying the management of microservice interactions. Popular service mesh implementations include Istio, Linkerd, and Consul.\narticle Whats a Service Mesh? article The Latest News About Service Mesh (TNS) video Istio \u0026amp; Service Mesh - Simply Explained in 15 mins feed Explore top posts about Service Mesh ◇Istio Istio is an open source service mesh platform that provides a way to control how microservices share data with one another. It includes APIs that let Istio integrate into any logging platform, telemetry, or policy system. Istio is designed to run in a variety of environments: on-premise, cloud-hosted, in Kubernetes containers, in services running on virtual machines, and more.\narticle What is Istio? video Istio Service Mesh Explained feed Explore top posts about Istio ◇Consul Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality. Each of these features can be used individually as needed, or they can be used together to build a full service mesh. Consul requires a data plane and supports both a proxy and native integration model. Consul ships with a simple built-in proxy so that everything works out of the box, but also supports 3rd party proxy integrations such as Envoy.\nofficial What is Consul? Open SourceConsul Guides video Consul Service Mesh Tutorial for Beginners feed Explore top posts about HashiCorp 22. Cloud Design Patterns Cloud design patterns are reusable solutions to common problems encountered in cloud computing architectures. These patterns address challenges related to scalability, reliability, security, and performance in distributed systems. They provide best practices for designing and implementing cloud-native applications, covering aspects such as data management, messaging, resiliency, and deployment. Examples include the Circuit Breaker pattern for handling faults, the CQRS pattern for separating read and write operations, and the Sidecar pattern for deploying components of an application into a separate process or container. By leveraging these patterns, developers can create more robust, efficient, and maintainable cloud applications that better utilize the benefits of cloud platforms.\ncourse 30 Cloud Design Patterns in depth official Cloud Design Patterns article Cloud design patterns, architectures, and implementations ◇Availability Availability is the percentage of time that a system is functional and working as intended, generally referred to as uptime. Availability can be affected by hardware or software errors, infrastructure problems, malicious attacks, and system load. Many cloud providers typically offer their users a service level agreement (SLA) that specifies the exact percentages of promised uptime/downtime. Availability is related to reliability in this sense. For example, a company might promise 99.99% uptime for their services.\narticle Defining Availability, Maintainability and Reliability in SRE article Techniques for Achieving High Availability video SLIs, SLOs, SLAs, oh my! (class SRE implements DevOps) ◇Data Management Data management is the key element of cloud applications, and influences most of the quality attributes. Data is typically hosted in different locations and across multiple servers for reasons such as performance, scalability or availability, and this can present a range of challenges. For example, data consistency must be maintained, and data will typically need to be synchronized across different locations.Additionally data should be protected at rest, in transit, and via authorized access mechanisms to maintain security assurances of confidentiality, integrity, and availability. Refer to the Azure Security Benchmark Data Protection Control for more information.\narticle Data management patterns video What is Master Data Management feed Explore top posts about Data Management ◇Design and Implementation Good design encompasses factors such as consistency and coherence in component design and deployment, maintainability to simplify administration and development, and reusability to allow components and subsystems to be used in other applications and in other scenarios. Decisions made during the design and implementation phase have a huge impact on the quality and the total cost of ownership of cloud hosted applications and services.\narticle Design and Implementation Patterns ◇Management and Monitoring DevOps management and monitoring entails overseeing the entire development process from planning, development, integration and testing, deployment, and operations. It involves a complete and real-time view of the status of applications, services, and infrastructure in the production environment. Features such as real-time streaming, historical replay, and visualizations are critical components of application and service monitoring.\narticle Management and Monitoring Get Started Guide feed Explore top posts about Monitoring ","permalink":"https://yuuniji.us.kg/en/posts/devops-roadmap/","summary":"\u003ch2 id=\"1-learn-a-programming-language\"\u003e1. Learn a Programming Language\u003c/h2\u003e\n\u003cp\u003eIt doesn’t matter what language you pick, but it is important to learn at least one. You will be able to use that language to write automation scripts.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003earticle\u003c/em\u003e \u003ca href=\"https://cs.fyi/guide/programming-language-for-devops\"\u003eGuide to Picking a Language for DevOps\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe guide recommends Python or Go for programming languages and Bash or PowerShell Core for shell scripting in DevOps. Python is versatile, widely used for automation and tools, while Go is crucial for container technologies like Kubernetes and Docker. Bash is ideal for Linux environments, and PowerShell Core is cross-platform, suitable for Windows and Linux. For more details, check the full guide \u003ca href=\"https://cs.fyi/guide/programming-language-for-devops\"\u003ehere\u003c/a\u003e.\u003c/p\u003e","title":"DevOps Roadmap"},{"content":"★Problems with Traditional Textbooks Core Issues\nGoal of Traditional Textbooks: To quickly teach practical and polite Japanese, but they overlook the true logic of the language. Main Problems: Teaching Japanese from an English perspective, making it difficult to truly understand Japanese expressions. Attempting to translate English phrases rather than teaching the Japanese grammatical system. Ignoring kanji study, leaving learners unable to read and comprehend Japanese texts in practical situations. Introducing honorifics too early without a solid foundation, causing confusion. Emphasizing complete sentence expressions (e.g., \u0026quot;Hi, my name is Smith\u0026quot;), but in Japanese, much information is omitted through context. Solution: Learn Japanese with Japanese Logic\nCore Idea: Approach Japanese from its own logic, not through English translation. Methods: Systematically introduce Japanese grammatical components to help learners build a solid foundation. Gradually construct the grammatical system rather than jumping around to teach specific phrases. Initial translations will be as literal as possible to help understand Japanese expressions, rather than using fluent English translations. Learn the most basic but challenging parts first (e.g., verb conjugations) to make subsequent learning smoother. Learning Tips\nAvoid Direct Translation\nDo not try to translate from English to Japanese; instead, learn Japanese expressions directly. Ask native speakers for correct expressions and understand the logic behind them. Learn Through Examples\nLanguage intuition is more important than rote memorization. Look at more examples and refer to grammar when in doubt. Don’t stop just because you don’t understand at first. Comprehension will deepen with accumulation. Expose Yourself to Real Japanese\nGet plenty of Japanese input through manga, websites, forums, etc. Practice speaking and listening, prioritizing communication with native speakers over relying solely on audio materials. Be Patient\nLanguage learning is an accumulative process. Every word or grammar point learned is a step forward. ★Japanese Writing System Kana\nTypes: Japanese has hiragana and katakana, both with the same pronunciation, each consisting of about 50 characters derived from kanji. Uses: Hiragana: Used for grammar (e.g., particles), substitutes for difficult kanji, colloquial language, onomatopoeia, and children\u0026rsquo;s learning. Katakana: Mainly used for loanwords (since kanji cannot represent Roman pronunciations). Kanji: The main component of written Japanese (nouns, verbs, adjectives). Helps distinguish words in sentences without spaces. Due to the abundance of homophones in Japanese, kanji helps differentiate meanings. Pitch Accent\nKana Pronunciation Rules: Each kana is pronounced as either [vowel] or [consonant + vowel], with the exception of 「ん」 and 「ン」. The fixed structure makes it difficult to learn correct pitch accent. Importance of Pitch Accent: Affects naturalness in speech; incorrect pitch can lead to a noticeable foreign accent. Homophones may have different meanings based on pitch. Learning Method: Cannot rely on memorizing rules (as they vary by context and dialect). The most effective method is imitation of native Japanese pronunciation, listening carefully and practicing. ◇Hiragana Overview\nHiragana is the basic phonetic unit of Japanese, capable of writing all Japanese, but since written Japanese lacks spaces, using only hiragana can make it hard to read. Writing Rules: Follow stroke order to ensure smooth writing and avoid bad habits. It is recommended to use handwriting practice sheets. Learning Method: Record and compare pronunciation to ensure accuracy. The most effective way to learn is still through pen and paper practice. Hiragana Chart\n「ん」 is the only kana without a vowel. Special pronunciations: 「し」(shi), ち (chi), つ (tsu) have different pronunciations from the usual consonant + vowel. 「r」 sound requires the tongue to touch the roof of the mouth. Note the difference between 「tsu」 and「su」. n w r y m h n t s k a ん(n) わ ら や ま は な た さ か あ ゐ* り み ひ に ち(chi) し(shi) き い る ゆ む ふ(fu) ぬ つ(tsu) す く う ゑ* れ め へ ね て せ け え を(o) ろ よ も ほ の と そ こ お * = No longer used\nVoiced and Semi-Voiced Sounds\nVoiced Sounds: Formed by adding 「゛」(dakuten) to the upper right corner of a kana, e.g.: か → が (ka → ga) さ → ざ (sa → za) Semi-Voiced Sounds: Formed by adding 「゜」(handakuten) to the upper right corner, only used with the 「は」 row: は → ぱ (ha → pa) ひ → ぴ (hi → pi) p b d z g a ぱ ば だ ざ が a ぴ び ぢ(ji) じ(ji) ぎ i ぷ ぶ づ(dzu) ず ぐ u ぺ べ で ぜ げ e ぽ ぼ ど ぞ ご o Small 「や」「ゆ」「よ」 Combinations\nUse small kana 「ゃ」「ゅ」「ょ」 to connect with /i/ column kana, forming new sounds, e.g.: き + ゃ = きゃ (kya) し + ゅ = しゅ (shu) ち + よ = ちょ (cho) p b j g r m h n c s k ya ぴゃ びゃ じゃ ぎゃ りゃ みゃ ひゃ にゃ ちゃ しゃ きゃ ya ぴゅ びゅ じゅ ぎゅ りゅ みゅ ひゅ にゅ ちゅ しゅ きゅ yu ぴょ びょ じょ ぎょ りょ みょ ひょ にょ ちょ しょ きょ yo Small 「つ」 (Sokuon)\nSmall 「つ」 indicates a repeated consonant sound, emphasizing pronunciation, e.g.: がっき (gakki) はっぱ (happa) ろっく (rokku) Examples:\nKana Pronunciation Example Word がっき gakki instrument はっぱ happa leaf ろっく rokku rock トラック to-rak-ku truck ざっし zas-shi magazine カップ kap-pu cup Long Vowels\nLengthen pronunciation by adding the corresponding vowel after a kana: Vowel Kana Used for Lengthening /a/ あ /i/, /e/ い /u/, /o/ う Examples:\nKana Pronunciation Meaning がくせい ga-ku-sei student せんせい sen-sei teacher きょう kyou today おはよう o-ha-you good morning おかあさん o-kaa-san mother ⚠ Note:\nThe principle of long vowels is simple. Try pronouncing 「か」 and 「あ」 separately, then quickly in succession. You’ll soon notice it sounds like extending the /ka/ sound. Remember, you’re actually pronouncing two sounds. 「ここ」(koko, here) vs. 「こうこう」(koukou, high school) 「おばさん」(obasan, aunt) vs. 「おばあさん」(obaasan, grandmother) In rare cases, /e/ vowels may also be lengthened with 「え」, and /o/ vowels with 「お」. Examples include 「おねえさん」、「おおい」 and 「おおきい」. Be aware of these exceptions, though they are few. Practice Resources\nWriting Practice: Kids\u0026rsquo; Character Chart Hiragana/Katakana Practice Grid Paper Hiragana/Katakana Chart Hiragana Tracing Sheet 1 Hiragana Tracing Sheet 2 Hiragana Tracing Sheet 3 Blank Writing Practice Sheet Self-Introduction Katakana (including Hiragana) Website Mnemonic JPG 1 Mnemonic JPG 2 Mnemonic JPG 3 Mnemonic JPG 4 Mnemonic JPG 5 Mnemonic JPG 6 Mnemonic PDF Mnemonic Website 1 Mnemonic Website 2 Mnemonic Website 3 Mnemonic Website 4 Hiragana Fill-in-the-Blank Printable 1 Hiragana Fill-in-the-Blank Printable 2 NHK Japanese Hiragana NHK Japanese Learning Platform 1000 Kanji List Pronunciation Practice: Download audio files for comparison practice (basic_sounds.zip). Recommended Poem 「いろは」: Contains all hiragana (except 「ん」), suitable as practice material. ◇Hiragana Practice Hiragana Chart Fill-in-the-Blank Although there are many online resources for learning hiragana, for the completeness of this guide, a fill-in-the-blank exercise is provided here. Obsolete kana have been removed, and it is recommended to use pen and paper for practice. Hiragana Chart\nn w r y m h n t s k a ん わ ら や ま は な た さ か あ り み ひ に ち し き い る ゆ む ふ ぬ つ す く う れ め へ ね て せ け え を ろ よ も ほ の と そ こ お Hiragana Writing Practice\nThis exercise is for practicing writing Japanese words. To avoid ambiguity, separators are added between each kana.\nDo not study the Romanized spelling; this is only to test your auditory memory.\nExercise 1\nたべもの ＝ ta | be | mo | no くるま ＝ ku | ru | ma あした ＝ a | shi | ta こくせき ＝ ko | ku | se | ki おすし ＝ o | su | shi たべる ＝ ta | be | ru わからない ＝ wa | ka | ra | na | i さずける ＝ sa | zu | ke | ru りくつ ＝ ri | ku | tsu たちよみ ＝ ta | chi | yo | mi ものまね ＝ mo | no | ma | ne ひがえり ＝ hi | ga | e | ri ぽんず ＝ pon | zu ひるめし ＝ hi | ru | me | shi れきし ＝ re | ki | shi ふゆかい ＝ fu | yu | ka | i Exercise 2\nWrite hiragana with small 「や」、「ゆ」、「よ」, as well as long vowels.\nAnswer which kana should be used to lengthen the sound.\nじゅぎょう ＝ jyu | gyo－\nぬるいおちゃ ＝ nu | ru | i | o | cha\nきゅうきょく ＝ kyu－ | kyo | ku\nうんようじょうほう ＝ un | yo－ | jyo－ | ho－\nびょうどう ＝ byo－ | do－\nじょうとうしゅだん ＝ jyo－ | to－ | shu | dan\nぎゅうにゅう ＝ gyu－ | nyu－\nしょうりゃく ＝ sho－ | rya | ku\nひゃくねんはやい ＝ hya | ku | nen | ha | ya | i\nそつぎょうしき ＝ so | tsu | gyo－ | shi | ki\nとうにょうびょう ＝ to－ | nyo－ | byo－\nむりょう ＝ mu | ryo－\nみょうじ ＝ myo－ | ji\nおかあさん ＝ o | ka－ | san\nろうにん ＝ ro－ | nin\nりゅうがくせい ＝ ryu－ | ga | ku | se | i\nHiragana Reading Practice\nPractice reading Japanese words, paying special attention to the pronunciation of small 「つ」.\nRemember not to focus too much on Romanized spelling; the goal is to test if you remember the pronunciation.\nReading Practice\nきゃっかんてき ＝ kyakkanteki はっぴょうけっか ＝ happyoukekka ちょっかん ＝ chokkan ひっし ＝ hisshi ぜったい ＝ zettai けっちゃく ＝ kecchaku しっぱい ＝ shippai ちゅうとはんぱ ＝ chuutohanpa やっかい ＝ yakkai しょっちゅう ＝ shotchuu ◇Katakana (カタカナ) Overview\nKatakana is mainly used for: Loanwords (e.g., コンピュータ - computer) Emphasis (similar to italics in English) Onomatopoeia (e.g., ドキドキ - heartbeat) Special purposes (e.g., biological names, company brands, etc.) Katakana pronunciation is identical to its corresponding hiragana, only the writing differs. Loanwords must adapt to the Japanese [consonant + vowel] structure, which may result in pronunciation differing from the original language. For example, the English word \u0026ldquo;coffee\u0026rdquo; is written as 「コーヒー」(kōhī) in Japanese.\nWhen learning katakana, discard the original English pronunciation and memorize it in Japanese, otherwise, it may be difficult for Japanese people to understand.\nKatakana Chart\nn w r y m h n t s k a Row ン (n) ワ ラ ヤ マ ハ ナ タ サ カ ア ヰ* リ ミ ヒ ニ チ (chi) シ (shi) キ イ ル ユ ム フ (fu) ヌ ツ (tsu) ス ク ウ ヱ* レ メ ヘ ネ テ セ ケ エ ヲ* ロ ヨ モ ホ ノ ト ソ コ オ * No longer used or rarely used. Writing and Recognition\nPronunciation is the same as hiragana, but the writing differs. 「ヲ」 is only used as a particle and is almost never used in modern Japanese; it can be ignored. Easily confused katakana: 「シ」「ン」「ツ」「ソ」: The first two are more vertical, the latter two more horizontal. 「ノ」「メ」「ヌ」, 「フ」「ワ」「ウ」 are also easily confused. Solutions: Pay attention to stroke order. Use Katakana trace sheets for practice. Separator 「・」: Used to separate compound loanwords, e.g., 「ロック・アンド・ロール」(rock and roll). Long Vowels (ー)\nLong vowels in katakana are represented by 「ー」, without the need for additional kana. Examples: ツアー (tsua-) → tour メール (me-ru) → email ケーキ (ke-ki) → cake Small Kana and Additional Sounds\nJapanese lacks certain foreign syllables, so small 「ア、イ、ウ、エ、オ」 are used: v w f ch d t j sh ヴァ ワ ファ チャ ダ タ ジャ シャ (a) ヴィ ウィ フィ チ ディ ティ ジ シ (i) ヴ ウ フ チュ ドゥ トゥ ジュ シュ (u) ヴェ ウェ フェ チェ デ テ ジェ シェ (e) ヴォ ウォ フォ チョ ド ト ジョ ショ (o) Notes: /wu/ sound does not exist, e.g., \u0026ldquo;woman\u0026rdquo; is written as 「ウーマン」. /tu/ sound is written as 「トゥ」, but older words still use 「ツ」, e.g., 「ツール」(tool). Early loanword substitution rules: building was formerly written as 「ビルヂング」, now written as 「ビルディング」. Katakana Example Words\nEnglish Katakana America アメリカ Russia ロシア cheating カンニング (cunning) tour ツアー company employee サラリーマン (salary man) Mozart モーツァルト car horn クラクション (klaxon) sofa ソファ / ソファー Halloween ハロウィーン French fries フライドポテト (fried potato) ◇Katakana Practice This exercise aims to help learners familiarize themselves with katakana writing, pronunciation, and its use in loanwords.\nKatakana Memory Test\nn w r y m h n t s k a Row ン ワ ラ ヤ マ ハ ナ タ サ カ ア リ ミ ヒ ニ チ シ キ イ ル ユ ム フ ヌ ツ ス ク ウ レ メ ヘ ネ テ セ ケ エ ロ ヨ モ ホ ノ ト ソ コ オ Katakana Writing Practice\nThis exercise aims to help learners correctly write katakana words and familiarize themselves with the pronunciation rules of loanwords in Japanese.\nKatakana Writing Exercise 1 (Basic Vocabulary)\nRomanization Katakana Meaning ta be mo no タベモノ food pan パン bread kon pyu－ ta コンピュータ computer myu－ ji ka ru ミュージカル musical u－ man ウーマン woman he a pi－ su ヘアピース hairpiece nu－ do ヌード nude me nyu－ メニュー menu ro－ te－ shon ローテーション rotation ha i kin gu ハイキング hiking kyan se ru キャンセル cancel ha ne mu－n ハネムーン honeymoon ku ri su ma su tsu ri－ クリスマスツリー Christmas tree ra i to ライト light na i to ge－ mu ナイトゲーム night game Katakana Writing Exercise 2 (Special Pronunciation)\nThis section covers more challenging katakana words, including loanwords with irregular pronunciations.\nKatakana Word List\nRomanization Katakana Meaning e i zu wi ru su エイズウイルス HIV virus no－ su sai do ノースサイド north side in fo me－ shon インフォメーション information pu ro ji e ku to プロジェクト project fa su to fu－ do ファストフード fast food she ru su ku ri pu to シェルスクリプト shell script we－ to re su ウェートレス waitress ma i ho－ mu マイホーム my home chi－ mu wa－ ku チームワーク teamwork mi ni su ka－ to ミニスカート miniskirt re－ za－ di su ku レーザーディスク laser disc chen ji チェンジ change re gyu ra－ レギュラー regular we i to ri fu tin gu ウェイトリフティング weightlifting Katakana Spelling Rules\nWhen converting English words to katakana, the following rules apply: No distinction between L/R: Japanese does not distinguish between L and R, both are represented by the 「ラ」 row. Ready → レディ Lady → レディ Long vowel representation: Consecutive vowels or words ending in /r/ often become long vowels (ー). Target → ターゲット Shoot → シュート Sokuon (small ッ): Used to represent a dropped /t/ or /c/ sound. Catch → キャッチ Cache → キャッシュ Supplemental vowels for consonant endings: Japanese words end in vowels (except for \u0026ldquo;n\u0026rdquo; and \u0026ldquo;m\u0026rdquo;, since we have 「ン」). For \u0026ldquo;t\u0026rdquo; and \u0026ldquo;d\u0026rdquo;, \u0026ldquo;o\u0026rdquo; is usually added; for others, \u0026ldquo;u\u0026rdquo; is generally used: Good → グッド Top → トップ Jack → ジャック English to Katakana Conversion Practice\nThis exercise covers common loanword conversions.\nExample: Europe ＝ ヨーロッパ English Katakana Meaning check チェック check violin バイオリン violin jet coaster (roller coaster) ジェットコースター roller coaster window shopping ウィンドーショッピング window shopping salsa サルサ salsa hotdog ホットドッグ hotdog suitcase スーツケース suitcase kitchen キッチン kitchen restaurant レストラン restaurant New York ニューヨーク New York ◇Kanji What is Kanji?\nIn Japanese, nouns, adjective stems, and verbs are basically written in Chinese characters, which are called Kanji. Adverbs are also usually written in Kanji, so to read written Japanese, one must master Kanji (except for children\u0026rsquo;s books and materials for those who do not know Kanji). However, not all words use Kanji; for example, the verb \u0026ldquo;to do\u0026rdquo; (する) is usually written in Hiragana. This guide uses Kanji from the beginning to familiarize you with real Japanese as quickly as possible. We will first introduce the basic characteristics of Kanji and then discuss efficient learning methods. Mastering Kanji is not easy, but it is not impossible. The key lies in the correct approach and long-term memory strategies. Methods for Learning Kanji\nResources for learning Kanji can be found online, such as: Jim Breen\u0026rsquo;s WWWJDIC Jisho.org These websites provide stroke orders for most Kanji. For beginners, repetitive writing is a good way to memorize stroke orders. When writing Kanji, pay attention to the overall balance to avoid top-heaviness. Through continuous practice, you will develop an intuition for stroke order, reducing reliance on models. Rules for Reading Kanji\nOn\u0026rsquo;yomi (音読み) and Kun\u0026rsquo;yomi (訓読み)\nBasically, each Kanji has two reading methods:\nOn\u0026rsquo;yomi (音読み): Derived from Chinese readings, mainly used for compound words (熟語).\nKun\u0026rsquo;yomi (訓読み): Native Japanese readings, usually used for standalone Kanji.\nFor example:\nKanji Kun\u0026rsquo;yomi On\u0026rsquo;yomi Example 力 ちから りょく 能力（のうりょく） Some Kanji may have multiple On\u0026rsquo;yomi or Kun\u0026rsquo;yomi readings. For example, in 「怪力」（かいりき）, 「力」 is read as 「りき」 instead of 「りょく」.\nOkurigana (送り仮名)\nIn verbs and adjectives, Kanji are usually followed by Hiragana, which is called Okurigana. For example:\nVerb: 「食べる」（たべる, to eat）→「食べた」（たべた, ate） Adjective: 「新しい」（あたらしい, new） Functions of Okurigana:\nDistinguish different parts of speech (intransitive and transitive verbs). Help indicate inflections (tense, voice, etc.). Sound Changes (音変)\nKanji in compound words may undergo sound changes to make pronunciation smoother. For example:\n/h/ → /b/ or /p/: 一本（いっぽん） 徹底（てってい） 「つ」 becomes 「っ」: 格好（かっこう） Differences Between Similar Kanji\nSome Kanji with similar meanings express subtle differences in different contexts. For example:\nDifferent Expressions for \u0026ldquo;Listen\u0026rdquo;\n聞く（きく）：General \u0026ldquo;listen\u0026rdquo; or \u0026ldquo;ask\u0026rdquo;. 聴く（きく）：Specifically \u0026ldquo;listen attentively\u0026rdquo;, such as listening to a concert. 訊く（きく）：Only means \u0026ldquo;to inquire\u0026rdquo;. Different Expressions for \u0026ldquo;See\u0026rdquo;\n見る（みる）：General \u0026ldquo;see\u0026rdquo;. 観る（みる）：Watch a performance or movie. Different Expressions for \u0026ldquo;Write\u0026rdquo; and \u0026ldquo;Draw\u0026rdquo;\n書く（かく）：Write characters. 描く（かく）：Draw pictures. 描く（えがく）：Depict (abstract scenes). 々——Repetition Symbol\nIn Japanese, there is a special symbol 「々」 used to repeat the preceding Kanji, for example:\n時時 → 時々（ときどき） 様様 → 様々（さまざま） 色色 → 色々（いろいろ） 一一 → 一々（いちいち） Why Use Kanji?\nSome people think that using three scripts (Kanji, Hiragana, Katakana) in Japanese is too complicated, but in fact, Kanji helps improve reading efficiency.\nResolving Homophone Ambiguity\nThe limited number of pronunciations in Japanese leads to many homophones. For example, 「きかん」（kikan） can have the following meanings:\n機関（きかん）：Organization 期間（きかん）：Period 帰還（きかん）：Return 基幹（きかん）：Foundation Without Kanji, it would be difficult to distinguish meanings when written only in Kana.\nEnhancing Visual Recognition\nCompared to sentences written entirely in Hiragana, text using Kanji is easier to understand quickly. For example:\nKana Writing:\nわたしはきのうともだちとえいがをみました。\nKanji Mixed Writing:\n私は昨日友達と映画を見ました。\nUsing Kanji allows keywords in sentences to be quickly recognized, reducing cognitive load during reading.\nAvoiding Space Issues\nKorean uses an alphabetic system, so spaces are needed to separate words, whereas Japanese using Kanji greatly improves text readability without the need for additional spaces. For example:\nKorean:\n나는 어제 친구와 영화를 보았다。\nJapanese:\n私は昨日友達と映画を見ました。\nKanji itself provides sufficient visual separation, eliminating the need for spaces.\n★Basic Grammar After learning how to write Japanese, we can begin to study the basic grammatical structures of Japanese. This chapter mainly covers the following content:\nNouns Adjectives Verbs Adverbs Additionally, we will introduce how to use particles to combine various parts into coherent sentences. After completing this chapter, you will master the basic sentence structures.\nNo. Topic Summary 1 State Expression い-adjectives, な-adjectives, and verbs can be used to describe states 2 Introduction to Particles は (topic), が (subject), を (object), etc. 3 Adjectives い-adjectives, な-adjectives, and their conjugation rules 4 Verb Basics Group 1 (五段), Group 2 (上一段/下一段), Group 3 (irregular) 5 Negative Form of Verbs Group 1 「う→あ+ない」, Group 2 「去る+ない」, Group 3 special conjugations 6 Past Tense Group 1 (complex changes), Group 2 (去る+た), Group 3 (する→した) 7 Particles Used with Verbs を (object), に (target), で (location) 8 Transitive and Intransitive Verbs Transitive verbs require an object, intransitive verbs occur on their own 9 Relative Clauses and Word Order Relative clauses precede, subject-object-verb order 10 Particles Related to Nouns の (possession), と (listing) 11 Adverbs and Sentence-ending Particles Adverbs (degree, manner), ね (confirmation), よ (emphasis) ◇State Representation Using 「だ」 to Represent the State of Something\nVocabulary Learning\n人【ひと】 - Person\n学生【がく・せい】 - Student\n元気【げん・き】 - Healthy, Energetic\nUsed to ask about someone\u0026rsquo;s well-being\nIn Japanese, there is no state verb equivalent to the English \u0026ldquo;to be.\u0026rdquo; However, you can add 「だ」 after a noun or な adjective to represent a state. (な adjectives will be explained in detail in the Adjectives chapter)\nRule: Noun/な Adjective + だ\nExample: 人＋だ → 人だ\nExamples\n人だ。 （Is a person.） 学生だ。 （Is a student.） 元気だ。 （Is well.） Omitting 「だ」\nIn spoken language, 「だ」 can be omitted when representing a state. Note that the subject is also often omitted because it can easily be inferred from context:\nＡ：元気？ （How are you?）\nＢ：元気。 （I\u0026rsquo;m fine.）\nWhen to Use 「だ」?\nUsing 「だ」 adds emphasis and makes the statement more formal. It is more commonly used by males in spoken language.\nCertain grammatical structures require the use of 「だ」 to clearly indicate the state, but you don\u0026rsquo;t need to worry about these details for now.\nConjugation for Negative States\nVocabulary Learning\n学生【がく・せい】 - Student\n友達【とも・だち】 - Friend\n元気【げん・き】 - Healthy, Energetic\nUsed to ask about someone\u0026rsquo;s well-being\nIn Japanese, negative and past forms are expressed through conjugation rather than simply adding 「だ」.\nRepresenting Negative States\nRule: Noun/な Adjective + じゃない\nExample: 学生＋じゃない → 学生じゃない\nExamples\n学生じゃない。 （Is not a student.） 友達じゃない。 （Is not a friend.） 元気じゃない。 （Is not well.） Conjugation for Past States\nVocabulary Learning\n学生【がく・せい】 - Student\n友達【とも・だち】 - Friend\n元気【げん・き】 - Healthy, Energetic\nUsed to ask about someone\u0026rsquo;s well-being\nRepresenting Past States\nRule: Noun/な Adjective + だった（Was）\nExample: 友達＋だった → 友達だった\nExamples\n学生だった。 （Was a student.） 友達だった。 （Was a friend.） 元気だった。 （Was well.） Negative Past States\nRule: Noun/な Adjective + じゃなかった（Was not） Steps:\nFirst, change to negative form: 「じゃない」 Replace the 「い」 in 「じゃない」 with 「かった」 Example: 友達じゃない → 友達じゃなかった\nExamples\n友達じゃなかった。 （Was not a friend.） 学生じゃなかった。 （Was not a student.） 元気じゃなかった。 （Was not well.） Conjugation Summary Table\nThese are the four ways to express states!\nAffirmative Negative Non-Past 学生（だ） 学生じゃない Is a student Is not a student Past 学生だった 学生じゃなかった Was a student Was not a student Next, you can learn how to use particles to further modify these states.\n◇State Expression Practice Vocabulary for This Section\nKanji\nBelow are the kanji covered in this section. It is recommended to learn kanji within the context of words:\n人 - Person 子 - Child 小 - Small 中 - Middle 大 - Big 友 - Friend 生 - Life 先 - Previous 学 - Study 校 - School 高 - High 車 - Car 供 - Accompany 達 - Reach Word Study\nBelow are the words that will be used in the exercises:\nSpoken Expressions\nうん - Yes (spoken)\nううん - No (spoken)\nDemonstratives\nこれ - This\nそれ - That\nあれ - That (over there)\nこう - Like this\nそう - Like that\nNouns\n人（ひと） - Person\n大人（おとな） - Adult\n子供（こども） - Child\n友達（ともだち） - Friend\n車（くるま） - Car\n学生（がくせい） - Student\n先生（せんせい） - Teacher\n学校（がっこう） - School\n小学校（しょうがっこう） - Elementary School\n中学校（ちゅうがっこう） - Middle School\n高校（こうこう） - High School\n大学（だいがく） - University\nConjugation Practice I\nConjugate the following nouns into declarative, negative, past, and past negative forms.\nExample:\n人 → 人だ / 人じゃない / 人だった / 人じゃなかった\nWord Declarative Negative Past Past Negative これ これだ これじゃない これだった これじゃなかった 大人 大人だ 大人じゃない 大人だった 大人じゃなかった 学校 学校だ 学校じゃない 学校だった 学校じゃなかった 友達 友達だ 友達じゃない 友達だった 友達じゃなかった 学生 学生だ 学生じゃない 学生だった 学生じゃなかった Conjugation Practice II Translate the following sentences into Japanese, explicitly writing out the conjugated forms.\nIt is a university. → 大学だ。 It is not a high school. → 高校じゃない。 He/She was a teacher. → 先生だった。 It is an adult. → 大人だ。 He/She was not a child. → 子供じゃなかった。 It was like this. → こうだった。 It was not that. → あれじゃなかった。 It is not a middle school. → 中学校じゃない。 It is a friend. → 友達だ。 It was not a car. → 車じゃなかった。 It was this. → これだった。 It is not like that. → そうじゃない。 Answering Questions Practice\nAnswer using 「うん」 or 「ううん」 and complete the sentence. Males use 「だ」, while females omit it.\nExample:\nQ）Student?\nA）ううん、学生じゃない。\nQuestion Answer Q1）Friend? A1）うん、友達。（Female） Q2）School? A2）ううん、学校じゃない。 Q3）Was it that? A3）ううん、それじゃなかった。 Q4）Is that so? A4）うん、そうだ。（Male） Q5）This? A5）ううん、それじゃない。（Object is far from the responder） Q6）Was he/she a teacher? A6）うん、先生だった。 Q7）Was it an elementary school? A7）ううん、小学校じゃなかった。 Q8）Child? A8）うん、子供。（Female） Review Key Points\n✅ Four Conjugations of State\nTense Affirmative Negative Non-past 学生（だ） 学生じゃない Past 学生だった 学生じゃなかった ✅ Key Takeaways:\n「だ」 can only be attached to nouns and な adjectives to indicate state. In spoken language, 「だ」 can be omitted, but it must be explicitly used in certain grammatical structures. 「じゃない」 is used to negate the current state. 「だった」 indicates a past state, and 「じゃなかった」 indicates a past negative state. Males tend to use 「だ」 more frequently in spoken language, while females use it less often. When answering questions, the subject can be omitted in spoken language, but the meaning should be inferred from context. ◇Introduction to Particles Using Particles to Define Grammatical Functions Particles are hiragana characters in Japanese used to define the grammatical function of words in a sentence. They are crucial because changing a particle can alter the entire meaning of a sentence. For example, changing a particle can turn \u0026ldquo;eat fish\u0026rdquo; into \u0026ldquo;fish eat.\u0026rdquo;\nThe Topic Particle 「は」 Vocabulary\n学生（がく・せい） - Student\nうん - Yes (casual)\n明日（あした） - Tomorrow\nううん - No (casual)\n今日（きょう） - Today\n試験（しけん） - Exam\n「は」 is used to indicate the topic of a sentence. For example, if someone says \u0026ldquo;not a student,\u0026rdquo; it is grammatically correct in Japanese, but it is unclear what the speaker is referring to. The topic particle allows us to specify what the sentence is about, and that particle is 「は」. When used as a topic particle, 「は」 is pronounced as / wa /.\nExample 1\nボブ：アリスは学生？ Bob：Is Alice a student? アリス：うん、学生。 Alice：Yes, (I) am. Bob\u0026rsquo;s question is about Alice, so Alice can omit the topic in her response.\nExample 2\nボブ：ジョンは明日？ Bob：Is John tomorrow? アリス：ううん、明日じゃない。 Alice：No, not tomorrow. Additional context is needed, such as they might be discussing when John\u0026rsquo;s exam is.\nExample 3\nアリス：今日は試験だ。 Alice：Today is the exam. ボブ：ジョンは？ Bob：What about John? アリス：ジョンは明日。 Alice：John is tomorrow. (For John, the exam is tomorrow.) Here, the topic 「は」 covers a broad scope, allowing the omission of specific nouns. The topic can refer to any action or object in any location, and can even include other sentences.\nThe Inclusive Topic Particle 「も」 Vocabulary\n学生（がく・せい） - Student\nうん - Yes (casual)\nでも - But\nううん - No (casual)\n「も」 is equivalent to \u0026ldquo;also\u0026rdquo; and can introduce a new topic based on the current topic.\nExample 1\nボブ：アリスは学生？ Bob：Is Alice a student? アリス：うん、トムも学生。 Alice：Yes, Tom is also a student. Using 「も」 maintains logical consistency in the sentence. For example, \u0026ldquo;I am a student, but Tom is not a student\u0026rdquo; would be unnatural. In such cases, you can use 「は」 to introduce a new topic, as in Example 2.\nExample 2\nボブ：アリスは学生？ Bob：Is Alice a student? アリス：うん、でもトムは学生じゃない。 Alice：Yes, but Tom is not a student. Example 3 (Negative Inclusion)\nボブ：アリスは学生？ Bob：Is Alice a student? アリス：ううん、トムも学生じゃない。 Alice：No, Tom is also not a student. The Identifying Particle 「が」 Vocabulary\n誰（だれ） - Who\n学生（がく・せい） - Student\n私（わたし） - I, Myself\nNow that we can establish topics using 「は」 and 「も」, what if we don\u0026rsquo;t know the topic? If I want to ask \u0026ldquo;Who is that student?\u0026rdquo;, I need to identify an object (identifier) because I don\u0026rsquo;t know who that student is. If I still use the topic particle, the question becomes \u0026ldquo;Is who a student?\u0026rdquo;, which sounds strange because \u0026ldquo;who\u0026rdquo; is not an actual person.\n「が」 is used to identify a specific object or attribute and is called the identifying particle.\nExample 1\nボブ：誰が学生？ Bob：Who is the student? アリス：ジョンが学生。 Alice：John is the student. 「が」 is used to specify who the \u0026ldquo;student\u0026rdquo; is.\nExample 2\n誰が学生？ Who is the student? 学生は誰？ Who is the student? The first sentence uses 「が」 to identify a student among a group of people, while the second sentence uses 「は」 to simply talk about the student.\nThe 「が」 in the first sentence cannot be replaced with 「は」, otherwise \u0026ldquo;who\u0026rdquo; becomes the topic, and the sentence would mean \u0026ldquo;Is who a student?\u0026rdquo;\nExample 3\n私は学生。 I am a student. 私が学生。 I am the student. (Emphasizing \u0026#34;I am the student\u0026#34;) 「は」 is used to introduce a topic, while 「が」 emphasizes identification.\nIn the first sentence, \u0026ldquo;私\u0026rdquo; is the topic, so the meaning is \u0026ldquo;As for me, I am a student.\u0026rdquo;\nBut the second sentence aims to specify who the \u0026ldquo;student\u0026rdquo; is. If we want to know who the student is, the particle 「が」 tells us it is \u0026ldquo;私.\u0026rdquo;\nI often translate the topic particle as \u0026ldquo;as for; about\u0026rdquo; and the identifying particle as \u0026ldquo;the one; the thing\u0026rdquo; to distinguish them.\nSemantic Distinction 私は学生。 As for me, (I am) a student. 私が学生。 I am the one (who is) the student. The particle 「が」 is typically used to answer \u0026ldquo;Who is the student?\u0026rdquo;\nIf you follow my method of thinking, you\u0026rsquo;ll realize that the particles 「は」 and 「が」 are quite different. The particle 「が」 is used to identify an attribute of something or someone, while the particle 「は」 is simply used to introduce a new topic. Therefore, in long sentences, people often use commas to separate the topic to avoid ambiguity about which part of the sentence is the topic.\nSummary 「は」: Indicates the topic, emphasizing what is being discussed. 「も」: Means \u0026ldquo;also,\u0026rdquo; adding new information based on the existing topic. 「が」: Used to identify or emphasize a specific object or attribute. ◇ Particle Practice Vocabulary for This Chapter\nKanji\nBelow are the kanji used in the new vocabulary. If you are unfamiliar with the stroke order, it is recommended to consult a dictionary. I suggest learning kanji within the context of words (e.g., the vocabulary listed later).\nKanji Meaning 何 What 映 Projection 画 Picture 彼 He 女 Female 昨 Previous 日 Day 今 Now 明 Bright 知 Know 合 Match 鉛 Lead 筆 Brush 入 Enter 口 Mouth 出 Exit 図 Plan 書 Write 館 Building 水 Water Vocabulary Learning\nBelow are simple nouns that will be used in the exercises later:\nJapanese Reading Meaning どこ doko Where いつ itsu When どうして doushite Why どう dou How どれ dore Which ミーティング miitingu Meeting ボールペン boorupen Ballpoint pen 何【なに】 nani What 誰【だれ】 dare Who 映画【えいが】 eiga Movie 彼【かれ】 kare He; Boyfriend 彼女【かのじょ】 kanojo She; Girlfriend 雨【あめ】 ame Rain 水【みず】 mizu Water 昨日【きのう】 kinou Yesterday 今日【きょう】 kyou Today 明日【あした】 ashita Tomorrow 知り合い【しりあい】 shiriai Acquaintance 鉛筆【えんぴつ】 enpitsu Pencil 仕事【しごと】 shigoto Work 入口【いりぐち】 iriguchi Entrance 出口【でぐち】 deguchi Exit 図書館【としょかん】 toshokan Library Basic Practice with 「は」\nFirst, let\u0026rsquo;s review the basic concept of particles. 「は」 is a topic particle, indicating the topic of the sentence, and is pronounced as / wa /.\nExample: Who? (Topic: Alice) → アリスは誰？ (Who is Alice?)\nWhere? (Topic: School) → 学校はどこ？ (Where is the school?)\nWhy? (Topic: That) → それはどうして？ (Why is that?)\nWhen? (Topic: Meeting) → ミーティングはいつ？ (When is the meeting?)\nWhat? (Topic: This) → これは何？ (What is this?)\nHow? (Topic: Movie) → 映画はどう？ (How is the movie?)\nHe is a middle school student. (Topic: He) → 彼は中学生だ。 (He is a middle school student.)\nShe is a teacher. (Topic: She) → 彼女は先生だ。 (She is a teacher.)\nIt\u0026rsquo;s raining. (Topic: Today) → 今日は雨。 (It\u0026rsquo;s raining today.)\nBob is a friend. (Topic: Bob) → ボブは友達。 (Bob is a friend.)\nIs he an acquaintance? (Topic: He) → 彼は知り合い？ (Is he an acquaintance?)\nPractice with 「は」 and 「も」\nNow, let\u0026rsquo;s practice the difference between 「は」 and 「も」. 「も」 means \u0026ldquo;also\u0026rdquo; and indicates that something is similar to what was mentioned before.\nExample: これは鉛筆だ。それも鉛筆だ。 (This is a pencil, and that is also a pencil.)\nToday it\u0026rsquo;s raining. Yesterday it was raining. → 昨日も雨だった。\nJim is a college student. But I am not a college student. → 私は大学生じゃない。\nThis is water. This is also water. → これもそう。\nThis is a ballpoint pen. But that is not a ballpoint pen. → それはボールペンじゃない。\nWork is tomorrow. Today was not work. → 今日は仕事じゃなかった。\nThis is the entrance. The exit is also here. → 出口もここだ。\nComprehensive Practice with 「は」、「も」, and 「が」\nChoose the appropriate particle for different scenarios. 「が」 is used to emphasize specific information.\nDialogue 1\nジム） アリスは誰？ ボブ） 友達だ。彼女がアリスだ。 (Jim: Who is Alice? Bob: She is a friend. She is Alice.) Dialogue 2\nアリス） これは何？ ボブ） それは鉛筆。 アリス） あれも鉛筆？ ボブ） あれはペンだ。 (Alice: What is this? Bob: That is a pencil. Alice: Is that also a pencil? Bob: That is a pen.) Dialogue 3\nアリス） 図書館はどこ？ ボブ） ここが図書館だ。 アリス） そこは図書館じゃない？ ボブ） そこじゃない。図書館はここだ。 (Alice: Where is the library? Bob: Here is the library. Alice: Isn\u0026#39;t that the library? Bob: No, the library is here.) ◇ Adjectives Properties of Adjectives\nJapanese adjectives are divided into な adjectives and い adjectives.\nな adjectives are similar to nouns and require 「な」 when modifying a noun. い adjectives end in 「い」 and directly modify nouns. な Adjectives\nVocabulary Learning 静か 【しず・か】 （な adjective） - Quiet 人 【ひと】 - Person きれい （な adjective） - Pretty; Clean 友達 【とも・だち】 - Friend 親切 【しん・せつ】 （な adjective） - Kind 魚 【さかな】 - Fish 好き 【す・き】 （な adjective） - Likable 肉 【にく】 - Meat 野菜 【や・さい】 - Vegetables Usage of な Adjectives Modifying Nouns (requires 「な」): 静かな人。(A quiet person) きれいな人。(A pretty person) As a Predicate in a Sentence (similar to nouns): 友達は親切。(The friend is kind.) 友達は親切な人だ。(The friend is a kind person.) Used with Particle 「が」 (expressing likes): ボブは魚が好きだ。(Bob likes fish.) ボブは魚が好きじゃない。(Bob does not like fish.) ボブは魚が好きだった。(Bob used to like fish.) ボブは魚が好きじゃなかった。(Bob did not like fish.) In the above examples, the topic particle and the identifying particle are used together. The topic of the sentence is \u0026#34;Bob,\u0026#34; and 「fish」 identifies what Bob likes. Modifying Noun Clauses (clause form): 魚が好きな人。(A person who likes fish) 魚が好きじゃない人。(A person who does not like fish.) 魚が好きだった人。(A person who used to like fish.) 魚が好きじゃなかった人。(A person who did not like fish.) We can also treat the entire noun clause modified by the adjective as a single noun. For example, we can make the entire clause the topic of the sentence, as shown below. 魚が好きじゃない人は、肉が好きだ。(People who do not like fish like meat.) 魚が好きな人は、野菜も好きだ。(People who like fish also like vegetables.) い Adjectives\nVocabulary Learning\n嫌い 【きら・い】 （な adjective） - Disliked; Hateful 食べ物 【た・べ・もの】 - Food おいしい （い adjective） - Delicious 高い 【たか・い】 （い adjective） - High; Expensive ビル - Building 値段 【ね・だん】 - Price レストラン - Restaurant あまり／あんまり - Not very (used with negatives) 好き 【す・き】 （な adjective） - Likable いい （い adjective） - Good Usage of い Adjectives\nModifying Nouns (used directly): 高いビル。(A tall building) As a Predicate in a Sentence (cannot add 「だ」): 値段が高い。(The price is high.) Modifying Noun Clauses: 値段が高いレストランは好きじゃない。(I don\u0026#39;t like expensive restaurants.) Conjugation of い Adjectives\nForm Conjugation Rule Example Meaning Affirmative - 高いビル。 A tall building. Negative Remove 「い」 + 「くない」 高くないビル。 A building that is not tall. Past Remove 「い」 + 「かった」 高かったビル。 A building that was tall. Past Negative Negative form remove 「い」 + 「かった」 高くなかったビル。 A building that was not tall. Special い Adjectives\nThe original form of 「いい」 is 「よい」, and it conjugates as 「よい」.\nConjugation Table\nForm いい かっこいい Affirmative いい かっこいい Negative よくない かっこよくない Past よかった かっこよかった Past Negative よくなかった かっこよくなかった Example Sentences\n値段があまりよくない。(The price is not very good.) 彼はかっこよかった！(He looked really cool!) ◇ Adjective Practice Vocabulary Used in This Chapter\nKanji\n面 - Mask; Face 白 - White 有 - Exist 名 - Name 嫌 - Dislike 好 - Like 静 - Quiet 楽 - Music; Comfort 切 - Cut 辛 - Spicy; Bitter 料 - Ingredients 理 - Reason Vocabulary List\nBelow are simple adjectives (and one noun) that may be used in the exercises:\nJapanese Reading Meaning きれい Pretty; Neat いい Good かっこいい Cool; Handsome 面白い おもしろい Interesting 有名 ゆうめい Famous 嫌い きらい Dislike; Hate 好き すき Like 大きい おおきい Big 小さい ちいさい Small 静か しずか Quiet 高い たかい Tall; Expensive 楽しい たのしい Fun 大切 たいせつ Important 辛い からい Spicy 料理 りょうり Dish (Noun) Adjective Conjugation Practice\nNow, practice conjugating each adjective in the following forms:\nPlain Form (if applicable) Negative Form Past Form Past Negative Form Note: The plain form of い-adjectives does not change, while な-adjectives require 「だ」. If no change is needed, fill in n/a.\nDictionary Form Plain Form Negative Form Past Form Past Negative Form 面白い n/a 面白くない 面白かった 面白くなかった 有名 有名だ 有名じゃない 有名だった 有名じゃなかった 嫌い 嫌いだ 嫌いじゃない 嫌いだった 嫌いじゃなかった 好き 好きだ 好きじゃない 好きだった 好きじゃなかった 大きい n/a 大きくない 大きかった 大きくなかった きれい きれいだ きれいじゃない きれいだった きれいじゃなかった 小さい n/a 小さくない 小さかった 小さくなかった いい n/a よくない よかった よくなかった 静か 静かだ 静かじゃない 静かだった 静かじゃなかった 高い n/a 高くない 高かった 高くなかった かっこいい n/a かっこよくない かっこよかった かっこよくなかった 楽しい n/a 楽しくない 楽しかった 楽しくなかった 大切 大切だ 大切じゃない 大切だった 大切じゃなかった Fill in the Blanks with Appropriate Adjectives or Particles\nExample:\nQ）　Student?\nA）　No, not a student.\nJim: Alice, are you busy now?\nAlice: No, I\u0026rsquo;m not busy.\nAlice: What is fun?\nBob: Games are fun.\nAlice: Who is important to you?\nBob: Jim is important.\nAlice: Do you like spicy dishes?\nBob: No, I like dishes that are not spicy.\nAlice: Is Jim cool?\nBob: No, he\u0026rsquo;s not cool.\nAlice: Is Bob famous?\nBob: No, I\u0026rsquo;m not famous.\nAlice: Was yesterday\u0026rsquo;s test good?\nBob: No, it wasn\u0026rsquo;t good.\n","permalink":"https://yuuniji.us.kg/en/posts/japanese-grammar/","summary":"\u003ch2 id=\"problems-with-traditional-textbooks\"\u003e★Problems with Traditional Textbooks\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCore Issues\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGoal of Traditional Textbooks: To quickly teach practical and polite Japanese, but they overlook the true logic of the language.\u003c/li\u003e\n\u003cli\u003eMain Problems:\n\u003cul\u003e\n\u003cli\u003eTeaching Japanese from an English perspective, making it difficult to truly understand Japanese expressions.\u003c/li\u003e\n\u003cli\u003eAttempting to translate English phrases rather than teaching the Japanese grammatical system.\u003c/li\u003e\n\u003cli\u003eIgnoring kanji study, leaving learners unable to read and comprehend Japanese texts in practical situations.\u003c/li\u003e\n\u003cli\u003eIntroducing honorifics too early without a solid foundation, causing confusion.\u003c/li\u003e\n\u003cli\u003eEmphasizing complete sentence expressions (e.g., \u003ccode\u003e\u0026quot;Hi, my name is Smith\u0026quot;\u003c/code\u003e), but in Japanese, much information is omitted through context.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSolution: Learn Japanese with Japanese Logic\u003c/p\u003e","title":"Japanese Grammar Guide"},{"content":"Introduction to Learning Japanese: Efficient Methods 1. Find a Textbook (Recommended: \u0026ldquo;Minna no Nihongo\u0026rdquo; (みんなの日本語)) Reasons for Recommendation: Textbooks written by Japanese authors contain errors commonly made by Japanese people, which won\u0026rsquo;t affect your Japanese proficiency in the eyes of native speakers. The key is to choose a textbook that suits you and that you can learn from, rather than one with perfect content. Textbook Structure: Main Book (entirely in Japanese) Teacher\u0026rsquo;s Guide (includes vocabulary lists, Chinese explanations, etc.) 2. Prepare a Repeater or Repeater Software Functional Requirements: Able to set repeat positions. Preferably has a function for decomposing and memorizing recordings. 3. Pre-class Preparation 1. Do Not Read the Text First; Start with the Vocabulary and Grammar Explanations If using \u0026ldquo;Minna no Nihongo,\u0026rdquo; only refer to the Teacher\u0026rsquo;s Guide and avoid the main book content. Also, skip the text translation parts in the Teacher\u0026rsquo;s Guide initially. 2. Memorize Vocabulary and Grammar First Memorize Vocabulary by Listening to Recordings Initial Memorization\nListen to the recordings while looking at the vocabulary and explanations, trying to remember a few words. Do not stress; gradually familiarize yourself with the pronunciation, form, conjugations (for verbs), and meanings of the words. Method\nCover the book content, listen to the recordings, recall the words, write them down, and remember their meanings. Create a separate list for words you cannot hear or write correctly and re-memorize them. Repeat the process until you can correctly write and recall the meanings of all words. Once you achieve this, look at the meanings and recall the Japanese words, reading them aloud. To improve speaking, you can also read aloud while listening in the first step. Efficiency Tips\nGradually reduce writing for familiar words. Be able to quickly recall the pronunciation, spelling, and meaning of words at normal playback speed. Enhance Memory and Resist Forgetting Mindset Forgetting is normal; do not be discouraged. Forgetting indicates a need for reinforcement. Review Strategy Dictate all the week\u0026rsquo;s vocabulary every weekend, recalling meanings quickly (within one second). For forgotten words, create a separate list and review them along with new words the following week. Remove words from the list after two successful reviews. Add words to the list if they cause issues in later steps and review them using the above method. Maintaining this list can significantly improve vocabulary memorization efficiency. 4. After Mastering Vocabulary and Grammar, Dictate the Text 1. Text Preparation Do not open the textbook\u0026rsquo;s text section; dictate the text solely through recordings. 2. Dictation Method First Dictation Listen continuously without pausing for the first time. Possible scenarios: Understand the general idea but not the details. Understand parts but struggle with certain sections. Completely fail to understand. Solutions Scenario 1 Reconstruct sentences based on your understanding and known vocabulary and grammar, then check against the recording. Repeatedly listen to or slow down unclear parts until corrected. Scenario 2 Write down understood parts and repeatedly listen to unclear sections, slowing down if necessary. If unable to understand, try writing the kana based on the sound to aid memory. This practice improves kana recognition accuracy, reducing errors common in subtitles. Scenario 3 Continue listening until it transforms into Scenario 1 or 2. If you have listened less than 50 times, do not give up; persist. 3. Check Against the Textbook This step is crucial; writing is three parts, revising is seven. Do not merely check for correct and incorrect sentences. Analyze Errors Thoroughly: If due to unmemorized vocabulary, add to the forgotten words list for future review. If due to unmastered grammar, revisit the grammar; if still unclear, consult ChatGPT. If due to mishearing, repeatedly listen to the sentence until understood. There is no upper limit to repetitions. For example, long fixed expressions like \u0026ldquo;していただきます\u0026rdquo; are initially challenging but improve with practice. 5. Assessment and Reinforcement of Learning Content After completing the above steps, clarify the following:\nMastered Content: Through dictation, vocabulary memorization, and text comprehension, identify what you have mastered.\nDeficient Content: Identify areas still problematic, such as vocabulary, grammar, or dictation accuracy.\nHandling Deficiencies Repeatedly dictate, memorize, and understand until deficiencies are addressed. Meticulously Complete Exercises: Value of Simple Exercises: Word substitution exercises, though simple, effectively reinforce learning. Error Analysis: When checking answers, do not just judge right or wrong; understand: Why the error occurred? Where is the mistake? How to avoid similar mistakes? Record and Summarize: Document all errors, reflect, and improve during weekly reviews. Notes Avoid Carelessness: Do not dismiss errors as carelessness; it indicates insufficient proficiency. Error Management: Summarize errors into a review checklist for regular gap-filling. Summary Initially, textbooks are the best dictation materials due to limited knowledge and vocabulary. At a certain level, start dictating anime or Japanese drama content. Online resources with transcribed dialogues can be used for comparison but should not be fully trusted. Carefully discern and, if necessary, seek help from a native speaker. A good friend for language learners Chinese/English/Japanese language exchange bulletin board Without a language environment, even well-dictated content may fade over time. Consider using an MP3 during commutes or waiting times to repeatedly listen to Japanese content, adapting your ears to the language. Just be careful not to miss your stop. 6. Importance of Writing Practice 1. Writing Schedule Initial Stage (first two weeks): May struggle to form coherent content; gradually adapt. After Two Weeks: Write at least one essay per week. 2. Writing Content and Methods Writing Goals: Write what you \u0026ldquo;want to write,\u0026rdquo; not just what you \u0026ldquo;can write.\u0026rdquo; Do not aim for literary excellence; even mundane content is fine as long as you persist. Strategies for Difficulties: Vocabulary: Use a dictionary to find necessary words. Grammar: Boldly use desired grammar, even if mistakes are possible. 3. Correcting Mistakes Mistakes in writing are part of the learning process. ChatGPT can help correct these errors. 7. Encouraging Yourself Record Achievements: Set learning goals and reward mechanisms, such as creating badges. Perseverance: No matter how slow the progress, as long as you do not stop, you are doing well. Avoid cramming for \u0026ldquo;false achievements\u0026rdquo;; real ability is what matters. There is no method that yields results without effort. But there are enjoyable methods that involve effort without pain. Wishing you success in your studies! Learning Japanese is a marathon; persistence is key. With patience and confidence, you will surely reap rewards! 🌟 ","permalink":"https://yuuniji.us.kg/en/posts/japanese-learning-methods/","summary":"\u003ch1 id=\"introduction-to-learning-japanese-efficient-methods\"\u003eIntroduction to Learning Japanese: Efficient Methods\u003c/h1\u003e\n\u003ch2 id=\"1-find-a-textbook-recommended-minna-no-nihongo-みんなの日本語\"\u003e1. Find a Textbook (Recommended: \u0026ldquo;Minna no Nihongo\u0026rdquo; (みんなの日本語))\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eReasons for Recommendation\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eTextbooks written by Japanese authors contain errors commonly made by Japanese people, which won\u0026rsquo;t affect your Japanese proficiency in the eyes of native speakers.\u003c/li\u003e\n\u003cli\u003eThe key is to choose a textbook that suits you and that you can learn from, rather than one with perfect content.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTextbook Structure\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eMain Book (entirely in Japanese)\u003c/li\u003e\n\u003cli\u003eTeacher\u0026rsquo;s Guide (includes vocabulary lists, Chinese explanations, etc.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-prepare-a-repeater-or-repeater-software\"\u003e2. Prepare a Repeater or Repeater Software\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFunctional Requirements\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAble to set repeat positions.\u003c/li\u003e\n\u003cli\u003ePreferably has a function for decomposing and memorizing recordings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-pre-class-preparation\"\u003e3. Pre-class Preparation\u003c/h2\u003e\n\u003ch3 id=\"1-do-not-read-the-text-first-start-with-the-vocabulary-and-grammar-explanations\"\u003e1. Do Not Read the Text First; Start with the Vocabulary and Grammar Explanations\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIf using \u0026ldquo;Minna no Nihongo,\u0026rdquo; only refer to the Teacher\u0026rsquo;s Guide and avoid the main book content. Also, skip the text translation parts in the Teacher\u0026rsquo;s Guide initially.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-memorize-vocabulary-and-grammar-first\"\u003e2. Memorize Vocabulary and Grammar First\u003c/h3\u003e\n\u003ch4 id=\"memorize-vocabulary-by-listening-to-recordings\"\u003eMemorize Vocabulary by Listening to Recordings\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInitial Memorization\u003c/strong\u003e\u003c/p\u003e","title":"Introduction to Learning Japanese: Effective Methods"},{"content":"Introduction to Learning Japanese: Core Concepts First Core: Everything Revolves Around Sentences! Sentences are Everything! Sentences are Wealth! Sentences are simple, clear, easy to master, and can be immediately used for communication!\nPassionate Achievements If you can speak ten sentences fluently every day, you can accumulate over 3,600 sentences in a year. By extrapolating, you can master nearly 10,000 practical sentences, reaching a level of free communication! After one year of learning Japanese, a student\u0026rsquo;s ability will far surpass that of most university Japanese majors, who may not even be able to speak ten consecutive sentences in Japanese. Lifelong Hobby Collect good sentences and practice them repeatedly until you can say them fluently. This habit has inspired many people under my influence to start loving Japanese and embark on the path to success! Take Action Now (Let’s spend 10 minutes learning the ten most commonly used Japanese sentences) どちらにお住まいですか。 (Where do you live?) どうやってこちらへみえましたか。 (How did you get here?) お体はいかがですか。 (How is your health?) 家族はお見えですか。 (Do you live alone?) お仕事はどちらですか。 (Where do you work?) 今度の日曜日はお暇ですか。 (Are you free this Sunday?) どちらにお勤めですか。 (Where do you work?) わからないことはありますか。 (Is there anything you don’t understand?) お困りのことはありませんか。 (Is there anything troubling you?) 仕事が終わったら、お会いできますか。 (Can we meet after work?) Second Core: The Three-Maximum Oral Muscle Training Method Core Concept Language is \u0026ldquo;spoken\u0026rdquo;!\nSwimming is \u0026ldquo;swum,\u0026rdquo; piano is \u0026ldquo;played,\u0026rdquo; and language must be \u0026ldquo;spoken\u0026rdquo;! Learning a foreign language requires training the oral muscles to easily produce \u0026ldquo;unfamiliar foreign sounds.\u0026rdquo; Training Method Practice sentences or short passages using the \u0026ldquo;maximum volume, maximum clarity, maximum speed\u0026rdquo; method until you can say them fluently. Record the time each time and strive to beat your previous record. You can compete with others. Forget about pride and enjoy the joy of speaking broken Japanese. The more you practice, the better your Japanese will become! Classic Three-Maximum Short Passages First Passage:\n人間には、わからないことや知らないことがあって当然である。 ただ私のわからないことや知らないことは、世間では常識的なことが多いように感じる。 だから、それがみんなが知っていることだということがわかれば、つい、わかったふりをしてしまう。 どうして「わからない」「知らない」と言えないのか。 自尊心が強いからだというより、物事に対してあまりにも鈍感である自分をさらけ出したくないのである。 素直になりたいものである。 Second Passage:\nモンテーニユは、こういうことをいっている。 世間にはよく、心では思っているのだけれと、どういっていいかわからない、という人がある。 その人は、たいへんいいことを考えている人のように見えるが、言葉にならないということは、心のなかにはなんにもない、ということである。 もし考えがあるならば、言葉続々として従う、という。 Third Passage:\nたしかに、言葉にあらわしてみてはじめて自分の考えのつまらなさがわかることがある。 何かすばらしい考えでもあるように思っているだけである。 後世の哲学者はみんなこの意味のことをいっている。 考えるというのは、言葉や文字で考えるのである。 言葉になったものが考えなのである。 Third Core: Mastering Grammar Through Speaking Method Master one grammar point with one sentence! Speak practical sentences fluently and master adorable grammar. There are about 260 grammar points in JLPT N2 and N1. Practice three sentences a day, and in three months, you can master 260 sentences, covering most advanced grammar. More importantly, you will finally be able to speak, and with over 200 absolutely \u0026ldquo;complex\u0026rdquo; sentences! I love grammar; without grammar, there would be no beautiful language! Example Sentences 長い苦労のあげく、とうとう病気になってしまいました。 (After a long period of hardship, I finally fell ill.) 喜びのあまり、声をあげた。 (I cheered out of sheer joy.) せっかく作ってくださったのだから、いただこうじゃないですか。 (Since you went to the trouble of making it, let’s eat it.) 彼の気持ちは本当に理解しがたい。 (His feelings are truly hard to understand.) これこそ本当の日本料理です。 (This is truly authentic Japanese cuisine.) Fourth Core: Mastering Vocabulary Through Speaking Memorizing words in isolation is futile! Words must be learned in sentences. The number of words is less important than the number of sentences; with over 300 sentences, you can communicate fluently. Practical Example Sentences 工事は来春から始められます。もっとも予算が獲得できればの話ですが。 (Construction can start next spring, provided we secure the budget.) 腹のうちは読めない。 (I can’t read his mind.) 父に死なれた友人を労わる。 (I comforted a friend who lost his father.) いっそ思い切って彼女に打ち明けようか。 (I might as well tell her outright.) 電話とは、時々ひどくいまいましいものである。 (The phone can be terribly annoying at times.) あそこの社長は説教が長くてうんざりしますよ。 (The boss there gives long lectures that are really tiresome.) けが人の介抱に忙しい。(I’m busy taking care of the injured.) こう暑くてはかなわない。(I can’t stand this heat.) こんなお金をもらう筋がない。(There’s no reason to accept this kind of money.) この町の魅力は夜の夜景に尽きる。 (The charm of this town lies in its night view.) Fifth Core: Mastering Listening Through Speaking The Relationship Between Listening and Speaking There are no listening problems in the world; they exist because too many people can’t understand. The secret to passionate Japanese: You can definitely understand what you can say! Core Concept: Just practice speaking a lot. As long as your \u0026ldquo;pronunciation is pure\u0026rdquo; and \u0026ldquo;usage is authentic,\u0026rdquo; your listening will naturally improve! Use the \u0026ldquo;Super Three-Maximum Method (maximum volume, maximum clarity, maximum speed)\u0026rdquo; and practice until you can speak faster than a Japanese person. Then, you won’t be afraid of not understanding! Why Speaking Improves Listening? Synchronous Growth\nWhat you can say, you can understand; what you can understand, you can say with practice. Language learning should be like acquiring a native language, naturally progressing in both listening and speaking. Proven by Practice\nWe never had specialized listening training as children, yet our Chinese listening skills are world-class. Conclusion: Listening and speaking grow synchronously! The Ultimate Solution to Listening Problems: Master Speaking! Practice speaking to ensure \u0026ldquo;pure pronunciation and authentic usage.\u0026rdquo; Once you master speaking, listening will naturally follow. Classic Japanese Listening Exercises Classic JLPT N3 Listening Question: 男の人と女の人が話しています。ギター教室の生徒は、今年、何人になりましたか。\nDialogue:\nMale: 今年は、生徒はたくさん来ていますか？ピアノ教室もギター教室も、去年は30人でしたね。 Female: はい。ピアノ教室は急に多くなって、去年の2倍になりました。でも、ギター教室は去年より10人、少なくなってしまいました。 Male: 10人もですか。それは困りましたね。 Answer: 20人（去年30人 - 10人 = 20人）\nClassic JLPT N2 Listening Question: 男の人はなぜ体の調子が悪くなったといっていますか。\n仕事をやりすぎたからです。 引越しで疲れたからです。 家の壁紙から毒が出てくるからです。 その建築業者が特にひどい材料を使ったからです。 Dialogue:\nFemale: 山田さん、ずいぶん元気がありませんねえ。 Male: ええ。頭痛がして、体がだるいんです。 Female: 仕事のやりすぎですか。 Male: いや。どうも、家の中の空気が悪いみたいなんです。 Female: だって、町の中心の空気の悪いところから、空気のいいところに引っ越したんでしょう？ Male:実は、家の壁紙から体に害のある化学物質、つまり毒が出ていることがわかったんです。 Female: えっ？それで体の具合がわるくなったんですか。 Male: ええ。 Answer: 3. 家の壁紙から毒が出てくるからです。\nClassic JLPT N1 Listening Question: 男の人の言いたいことはどんなことですか。\n今忙しいから、自分で調べてやってほしい。 やり方は簡単だから、自分でやってほしい。 ほかの人に聞いてほしい。 グラフはいらないから、やめてほしい。 Dialogue:\nFemale: あのう、すみません。これ、やり方、教えてください。 Male: ええ、何？ ああ、これね。表を作るわけ？ Female: ええ。だけど、中にグラフも入れたいんです。できますか。 Male: うーん。できることはできるけど。 Female: ほんと？ どうやるんですか。 Male: えーとねえ、あの棚の上に黄色いの、あるよね。 Female: はい。 Male: あれ見てねえ。 Female: 教えてくれないんですか。 Male: 今それどころじゃないんだよ。 Female: はーい。 Answer: 1. 今忙しいから、自分で調べてやってほしい。\nSixth Core: Mastering Exams Through Speaking Core Concept Exams are speaking, and speaking is exams! The two are completely unified. Exam questions repeatedly test common expressions used in language communication. Exams are characterized by \u0026ldquo;changing the soup but not the medicine.\u0026rdquo; Once you are familiar with common test points and question types, all exams can be easily handled. Methods to Achieve Goals Turn Exam Questions into Speaking Practice\nConvert each question’s correct answer into authentic spoken expressions. Use the \u0026ldquo;Three-Maximum Method\u0026rdquo; to practice repeatedly until you can say them fluently. Develop First-Class Language Sense\nUnderstand the patterns of exam traps and familiarize yourself with the logic and context of the language. Combine quality education (language communication skills) with exam-oriented education (test-taking skills). Kill Multiple Birds with One Stone\nImprove your Japanese exam skills while gaining real Japanese communication abilities. This is significant for personal career development and even national economic construction. Mingzheng’s Passionate Japanese Exam Secrets Speak Exam Questions Fluently: Don’t just choose the correct answer; confidently express each question’s sentence in an authentic way. Change to First Person: Convert the sentences in the questions into your own words, using the first person, and practice until you fully master them. Remember: True success comes from language communication, not just passing exams! Classic Exam Question Practice Classic JLPT N3 Question Question:\n兄と弟は周りの人にいつも______しまう。\n①くらべて ②くらべられて ③くらべらせて ④くらべられさせて\nAnswer: ②くらべられて\nSpeaking Practice:\n私は周りの人にくらべられてしまうことが多いです。(I am often compared to others around me.) Classic JLPT N2 Question Question:\nその男は年をとっている______、体も弱っており、仕事をするのは無理だった。\n①一方に ②うえは ③あまりは ④うえに\nAnswer: ④うえに\nSpeaking Practice:\n年をとったうえに、体も弱ってしまいました。(Not only have I aged, but my body has also weakened.) Classic JLPT N1 Question Question:\n外国からのお客を______、銀座でウィンドウショッピングをした。\n①案内するがてら ②案内なので ③案内だから ④案内かたがた\nAnswer: ①案内するがてら\nSpeaking Practice:\n銀座で外国からのお客を案内するがてら、ウィンドウショッピングをしました。(While guiding foreign guests in Ginza, I did some window shopping.) Mingzheng’s Strong Appeal To prepare more efficiently for Japanese proficiency exams, interpretation certification exams, and other tests, do not just settle for choosing the correct answer! The real goal is: Convert the sentences in the exam questions into practical, authentic spoken language. Practice repeatedly, using the first person, until you can say them fluently. Let’s \u0026ldquo;speak exam questions fluently\u0026rdquo; together! Strive for real language communication skills and success!\nSeventh Core: Learn One Sentence at a Time, Speak One Sentence Worth Ten! Core Concept There are countless sentences, but learn one at a time!\nIn language learning, the number of sentences is \u0026ldquo;countless,\u0026rdquo; but don’t feel discouraged or intimidated by this. Every sentence you learn must be meticulously mastered and spoken fluently. Not understanding once is just that—once. Confusion is temporary. Practice repeatedly until you fully grasp it. Speak one sentence worth ten!\nEach sentence you practice should be \u0026ldquo;pronounced clearly and accurately,\u0026rdquo; not only authentic but also confident, even more standard than a Japanese person. Pursue quality over quantity: Speaking one authentic sentence is more useful than speaking ten vague sentences! Methods and Requirements For every sentence you learn, ensure:\nAccurate pronunciation. Fluent expression. Confidence and certainty. Avoid the cycle of \u0026ldquo;learn and forget, forget and learn.\u0026rdquo; Gradually accumulate and continuously reinforce.\nIn actual communication, aim to be a cut above the rest, not letting others easily notice that you are a beginner.\nClassic Sentences and Practice お会いできて、うれしいです。\nEnglish Translation: I’m glad to meet you.\nSpeaking Practice: Scenario: Polite greeting when meeting someone for the first time. Example Sentence: お会いできて、ほんとうにうれしいです。(I’m really glad to meet you.) 皆さんといい友達になれることを楽しみにしています。\nEnglish Translation: I look forward to becoming good friends with everyone.\nSpeaking Practice: Scenario: Expressing anticipation when joining a team or social occasion. Example Sentence: このクラスの皆さんと仲良くなれることを楽しみにしています。(I look forward to getting along well with everyone in this class.) 日本の会社で働くためには、日本語が上手に話せることが必要だと思います。\nEnglish Translation: To work in a Japanese company, I think it’s necessary to speak Japanese well.\nSpeaking Practice: Scenario: Discussing the importance of language skills in an interview. Example Sentence: 日本の会社で成功するには、日本語能力が欠かせないと思います。(I think Japanese language skills are essential for success in a Japanese company.) 外国語をマスターするコツは、積極的に話すことじゃないかと思います。\nEnglish Translation: I think the key to mastering a foreign language is to speak actively.\nSpeaking Practice: Scenario: Discussing language learning methods. Example Sentence: 外国語を上達させるには、間違いを恐れずに話すことが大切だと思います。(I think it’s important to speak without fear of mistakes to improve in a foreign language.) お考えを聞かせていただければありがたいと思います。\nEnglish Translation: I would appreciate it if you could share your thoughts.\nSpeaking Practice: Scenario: Polite expression when discussing issues with a superior or colleague. Example Sentence: こちらの件について、ぜひお考えをお聞かせください。(Please share your thoughts on this matter.) Eighth Core: Conquer Japanese in One Year! Core Concept Carry the language environment with you: By creating small notes, carry Japanese words and sentences with you at all times, repeatedly stimulating your brain and enhancing memory. Make full use of碎片时间: Easily master ten Japanese sentences a day, and over time, you can completely conquer the language in a year. Control laziness, focus on action: Stop complaining and start \u0026ldquo;filling in the gaps\u0026rdquo; from now on, focusing on solving problems. Practical Business Japanese Sentence Patterns 取り扱い品目について紹介していただけないでしょうか。\nEnglish Translation: Could you introduce your product line?\nScenario: When first contacting a client to understand their business scope.\nExample Expansion: 新商品の取り扱い品目について教えていただけますか？(Could you tell me about the new product categories?) できるだけご希望に添えようにいたしましょう。\nEnglish Translation: We will do our best to meet your requirements.\nScenario: Expressing cooperation intentions during negotiations or discussions with clients.\nExample Expansion: お客様のご希望に最大限お応えできるように努力いたします。(We will strive to meet your needs to the fullest extent.) 古いお得意先という関係を考慮に入れなければ、このようなオファーはいたしませんね。\nEnglish Translation: We are offering this price considering you are a long-term client.\nScenario: Explaining price or优惠 conditions during communication with clients.\nExample Expansion: 長年のお取引を考慮して、特別な価格でご提供いたします。(Considering our long-term business relationship, we are offering you a special price.) 残念ながら、当方は貴社の損害賠償の要求を受け入れかねます。\nEnglish Translation: Unfortunately, we cannot accept your company’s claim for compensation.\nScenario: Formal statement during communication regarding disputes or contract terms.\nExample Expansion: 誠に申し訳ございませんが、こちらの条件には応じかねます。(We sincerely apologize, but we cannot accept these terms.) われわれは外資を導入するに当たって、契約を重んじて、信用を守るという原則を一貫モットーしています。\nEnglish Translation: When introducing foreign investment, we consistently adhere to the principle of valuing contracts and maintaining trust.\nScenario: Formal introduction of company cooperation principles.\nExample Expansion: 信頼を基盤とした長期的な協力関係を築くことを目指しています。(We aim to build long-term cooperative relationships based on trust.) Motivational Quotes Motivate Yourself in Japanese: 日本語を勉強して、祖国のために働こう。\nStudy Japanese and serve your homeland. 昨日の失敗は今日の成功となる。\nToday’s achievements stem from yesterday’s impossibilities. 渇望と決心は、失望に打ち勝つ。\nDesire and determination will overcome disappointment. 意義ある目標に向かって進み始めるのなら、それはもう成功だと言える。\nWhen you start moving toward a meaningful goal, you can already call it success. 渇望と決心は、失望に打ち勝つ。\nDesire and determination will overcome disappointment. 金銭の有無が問題なのではない、考えの有無が問題なのだ。\nThe lack of money is not the problem; the lack of ideas is. 自分を信じること。それが成功の秘訣である。\nYou must believe in yourself; that is the secret to success. 意義ある目標に向かって進み始めるのなら、それはもう成功だと言える。\nWhen you start moving toward a meaningful goal, you can already call it success. 成功の影には、数多くの失敗の道のりがある。\nBehind every successful person are many years of failure. 理想の自分を持ち、努力した結果が、今の身分や地位を築いたのである。 Our identity and status are built on the results of our efforts toward our ideal selves. Three Major Admonitions Admonition One: Stop Complaining, Take Action Now! Poor foundation? No problem!\nA good foundation that goes unused is far less valuable than taking action now. Admonition Two: Don’t Underestimate Your Potential! Poor memory? No language talent? Not a problem!\nAs long as you can speak Chinese, you have the ability to speak fluent Japanese. Admonition Three: Skills are the Best Guarantee! Worried that learning Japanese won’t lead to a good job?\nThose with real talent never worry about employment; skills are the greatest competitive advantage. ","permalink":"https://yuuniji.us.kg/en/posts/japanese-learning-concept/","summary":"\u003ch1 id=\"introduction-to-learning-japanese-core-concepts\"\u003eIntroduction to Learning Japanese: Core Concepts\u003c/h1\u003e\n\u003ch2 id=\"first-core-everything-revolves-around-sentences-sentences-are-everything-sentences-are-wealth\"\u003eFirst Core: Everything Revolves Around Sentences! Sentences are Everything! Sentences are Wealth!\u003c/h2\u003e\n\u003cp\u003eSentences are simple, clear, easy to master, and can be immediately used for communication!\u003c/p\u003e\n\u003ch3 id=\"passionate-achievements\"\u003ePassionate Achievements\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIf you can speak ten sentences fluently every day, you can accumulate over 3,600 sentences in a year. By extrapolating, you can master nearly 10,000 practical sentences, reaching a level of free communication!\u003c/li\u003e\n\u003cli\u003eAfter one year of learning Japanese, a student\u0026rsquo;s ability will far surpass that of most university Japanese majors, who may not even be able to speak ten consecutive sentences in Japanese.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lifelong-hobby\"\u003eLifelong Hobby\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCollect good sentences and practice them repeatedly until you can say them fluently.\u003c/li\u003e\n\u003cli\u003eThis habit has inspired many people under my influence to start loving Japanese and embark on the path to success!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"take-action-now-lets-spend-10-minutes-learning-the-ten-most-commonly-used-japanese-sentences\"\u003eTake Action Now (Let’s spend 10 minutes learning the ten most commonly used Japanese sentences)\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eどちらにお住まいですか。\u003c/strong\u003e (Where do you live?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eどうやってこちらへみえましたか。\u003c/strong\u003e (How did you get here?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eお体はいかがですか。\u003c/strong\u003e (How is your health?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e家族はお見えですか。\u003c/strong\u003e (Do you live alone?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eお仕事はどちらですか。\u003c/strong\u003e (Where do you work?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e今度の日曜日はお暇ですか。\u003c/strong\u003e (Are you free this Sunday?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eどちらにお勤めですか。\u003c/strong\u003e (Where do you work?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eわからないことはありますか。\u003c/strong\u003e (Is there anything you don’t understand?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eお困りのことはありませんか。\u003c/strong\u003e (Is there anything troubling you?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e仕事が終わったら、お会いできますか。\u003c/strong\u003e (Can we meet after work?)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"second-core-the-three-maximum-oral-muscle-training-method\"\u003eSecond Core: The Three-Maximum Oral Muscle Training Method\u003c/h2\u003e\n\u003ch3 id=\"core-concept\"\u003eCore Concept\u003c/h3\u003e\n\u003cp\u003eLanguage is \u0026ldquo;spoken\u0026rdquo;!\u003c/p\u003e","title":"Introduction to Learning Japanese: Core Concepts"},{"content":"Hugo Blog + GitHub Pages Complete Deployment Guide 📌 Environment Preparation Device: MacBook (macOS) Tools: Git Hugo GitHub Account Install Hugo brew install hugo Verify installation:\nhugo version 🎯 Create Hugo Blog mkdir blog \u0026amp;\u0026amp; cd blog hugo new site . Initialize Git:\ngit init 🎨 Choose \u0026amp; Add Theme Recommended PaperMod theme:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Edit config.toml, add:\ntheme = \u0026#34;PaperMod\u0026#34; baseURL = \u0026#34;https://yuuniji.us.kg\u0026#34; 📝 Write Blog Posts Create your first post:\nhugo new posts/hello-world.md Edit content/posts/hello-world.md:\n--- title: \u0026#34;Hello World\u0026#34; date: 2025-02-22T12:00:00 draft: false --- This is my first blog post! 🔧 Local Preview (Skip for First Deployment) hugo server -D Access in browser:\nhttp://localhost:1313 🔥 Publish to GitHub 1. Create GitHub Repositories blog (for Hugo source code) yuuniji.github.io (for generated static files) 2. Push to blog Repository git remote add origin https://github.com/yuuniji/blog.git git branch -M main git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main 3. Generate Static Files hugo -D Static files are located in the public/ directory.\n4. Push to yuuniji.github.io cd public git init git remote add origin https://github.com/yuuniji/yuuniji.github.io.git git checkout -b main git add . git commit -m \u0026#34;Deploy Hugo site\u0026#34; git push -f origin main 🌎 Configure GitHub Pages Go to yuuniji.github.io repository Settings → Pages. Select main branch, save and wait for deployment to complete. Visit https://yuuniji.us.kg to view your blog. 🔄 Automated Deployment (Optional) 1. Add deploy.sh to blog Repository nano deploy.sh Paste the following content:\n#!/bin/bash hugo -D cd public git add . git commit -m \u0026#34;Deploy: $(date)\u0026#34; git push origin main cd .. Save and exit (press Ctrl + X, then Y, and Enter).\n2. Grant Execution Permission chmod +x deploy.sh 3. Run Deployment Script ./deploy.sh 🎉 All Done! To update your blog in the future:\nWrite posts in blog/ directory: hugo new posts/xxx.md Run ./deploy.sh Visit https://yuuniji.us.kg to see updates 💡 Refer back to this guide if you have any questions! 🚀\nHugo Blog Multi-language \u0026amp; Feature Expansion Guide Quick Links baseURL = \u0026#34;https://yuuniji.us.kg\u0026#34; title = \u0026#34;Yuuniji的博客\u0026#34; theme = \u0026#34;PaperMod\u0026#34; defaultContentLanguage = \u0026#34;zh\u0026#34; hasCJKLanguage = true [languages] [languages.zh] languageName = \u0026#34;中文\u0026#34; weight = 1 contentDir = \u0026#34;content/zh\u0026#34; [languages.zh.params] archivesTitle = \u0026#34;归档\u0026#34; archivesDescription = \u0026#34;按年份和月份查看文章归档\u0026#34; [languages.zh.menu] [[languages.zh.menu.main]] name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 [[languages.zh.menu.main]] name = \u0026#34;关于\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 2 [[languages.zh.menu.main]] name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 3 [[languages.zh.menu.main]] name = \u0026#34;归档\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 4 [[languages.zh.menu.main]] name = \u0026#34;搜索\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 5 [languages.en] languageName = \u0026#34;English\u0026#34; weight = 2 contentDir = \u0026#34;content/en\u0026#34; [languages.en.params] archivesTitle = \u0026#34;Archives\u0026#34; archivesDescription = \u0026#34;Browse articles by year and month\u0026#34; [languages.en.menu] [[languages.en.menu.main]] name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 [[languages.en.menu.main]] name = \u0026#34;About\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 2 [[languages.en.menu.main]] name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 3 [[languages.en.menu.main]] name = \u0026#34;Archives\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 4 [[languages.en.menu.main]] name = \u0026#34;Search\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 5 [languages.ja] languageName = \u0026#34;日本語\u0026#34; weight = 3 contentDir = \u0026#34;content/ja\u0026#34; [languages.ja.params] archivesTitle = \u0026#34;アーカイブ\u0026#34; archivesDescription = \u0026#34;年と月ごとに記事を表示\u0026#34; [languages.ja.menu] [[languages.ja.menu.main]] name = \u0026#34;ホーム\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 [[languages.ja.menu.main]] name = \u0026#34;について\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 2 [[languages.ja.menu.main]] name = \u0026#34;タグ\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 3 [[languages.ja.menu.main]] name = \u0026#34;アーカイブ\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 4 [[languages.ja.menu.main]] name = \u0026#34;検索\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 5 [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;SITEMAP\u0026#34;] section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] archives = [\u0026#34;HTML\u0026#34;] search = [\u0026#34;HTML\u0026#34;] [params] author = \u0026#34;Yuuniji\u0026#34; defaultTheme = \u0026#34;auto\u0026#34; ShowAllPagesInArchive = true ShowShareButtons = true ShowReadingTime = true ShowToc = true TocOpen = false ShowBreadCrumbs = true ShowCodeCopyButtons = true ShowPostNavLinks = true ShowRssButtonInSectionTermList = true archives = true [params.fuseOpts] isCaseSensitive = false shouldSort = true location = 0 distance = 1_000 threshold = 0.4 minMatchCharLength = 0 keys = [ \u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34; ] [content] archivesDir = \u0026#34;content/archives\u0026#34; 1. Directory Structure According to your hugo.toml configuration, your content directory structure should be:\ncontent/ ├── zh/ │ ├── _index.md │ ├── about.md │ ├── archives.md │ ├── search.md │ ├── categories/_index.md │ ├── posts/_index.md │ ├── tags/_index.md ├── en/ │ ├── _index.md │ ├── about.md │ ├── archives.md │ ├── search.md │ ├── categories/_index.md │ ├── posts/_index.md │ ├── tags/_index.md ├── ja/ ├── _index.md ├── about.md ├── archives.md ├── search.md ├── categories/_index.md ├── posts/_index.md ├── tags/_index.md Additionally, you need to create an archetypes directory to adapt to different languages:\narchetypes/ ├── default.md ├── zh.md ├── en.md ├── ja.md 2. archetypes Directory Configuration Each language\u0026rsquo;s archetypes file is used to set default front matter.\nDefault archetypes/default.md --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true tags: [] categories: [] --- archetypes/zh.md (Chinese) --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true tags: [] categories: [] lang: \u0026#34;zh\u0026#34; --- archetypes/en.md (English) --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true tags: [] categories: [] lang: \u0026#34;en\u0026#34; --- archetypes/ja.md (Japanese) --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true tags: [] categories: [] lang: \u0026#34;ja\u0026#34; --- 3. Create Posts in Different Languages Use the --kind option to specify archetypes and create posts in the corresponding content/ directory.\nChinese Post hugo new content/zh/posts/my-first-post1.md This will create my-first-post.md in the content/zh/posts/ directory, using archetypes/zh.md as the template.\nEnglish Post hugo new content/en/posts/my-first-post1.md This will create my-first-post.md in the content/en/posts/ directory, using archetypes/en.md as the template.\nJapanese Post hugo new content/ja/posts/my-first-post1.md This will create my-first-post.md in the content/ja/posts/ directory, using archetypes/ja.md as the template.\nAutomating the Creation of Articles in Different Languages create_multilingual_post.sh Script\n#!/bin/bash # Check if the input parameter exists if [ -z \u0026#34;$1\u0026#34; ]; then echo \u0026#34;Please enter the article title.\u0026#34; exit 1 fi TITLE=\u0026#34;$1\u0026#34; DATE=$(date +%Y-%m-%d) # Create the article file name (using hyphens to separate words) POST_NAME=$(echo \u0026#34;$TITLE\u0026#34; | tr \u0026#34; \u0026#34; \u0026#34;-\u0026#34;) # Generate the Chinese article mkdir -p \u0026#34;content/zh/posts\u0026#34; cat \u0026gt; \u0026#34;content/zh/posts/$POST_NAME.md\u0026#34; \u0026lt;\u0026lt;EOL --- title: \u0026#34;$TITLE\u0026#34; date: $DATE lang: \u0026#34;zh\u0026#34; draft: true tags: [] categories: [] --- This is the Chinese version of the content. EOL # Generate the English article mkdir -p \u0026#34;content/en/posts\u0026#34; cat \u0026gt; \u0026#34;content/en/posts/$POST_NAME.md\u0026#34; \u0026lt;\u0026lt;EOL --- title: \u0026#34;$TITLE\u0026#34; date: $DATE lang: \u0026#34;en\u0026#34; draft: true tags: [] categories: [] --- This is the English version of the post. EOL # Generate the Japanese article mkdir -p \u0026#34;content/ja/posts\u0026#34; cat \u0026gt; \u0026#34;content/ja/posts/$POST_NAME.md\u0026#34; \u0026lt;\u0026lt;EOL --- title: \u0026#34;$TITLE\u0026#34; date: $DATE lang: \u0026#34;ja\u0026#34; draft: true tags: [] categories: [] --- This is the Japanese version of the article. EOL echo \u0026#34;Successfully created articles in three languages: $TITLE\u0026#34; In the terminal, first navigate to the directory where the script is located and grant execution permissions:\nchmod +x create_multilingual_post.sh Execute the following command and provide the article title:\n./create_multilingual_post.sh \u0026#34;Your Article Title\u0026#34; Summary Creating posts in different languages requires hugo new --kind \u0026lt;language\u0026gt; \u0026lt;path\u0026gt;. archetypes directory should have zh.md, en.md, ja.md to match the content/ directory. Keep contentDir structure consistent to avoid Hugo failing to find the correct template when generating posts. Now you can correctly manage the creation of posts for a multi-language Hugo blog! 🚀\n","permalink":"https://yuuniji.us.kg/en/posts/my-first-post/","summary":"\u003ch1 id=\"hugo-blog--github-pages-complete-deployment-guide\"\u003eHugo Blog + GitHub Pages Complete Deployment Guide\u003c/h1\u003e\n\u003ch2 id=\"-environment-preparation\"\u003e📌 Environment Preparation\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDevice\u003c/strong\u003e: MacBook (macOS)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eGit\u003c/li\u003e\n\u003cli\u003eHugo\u003c/li\u003e\n\u003cli\u003eGitHub Account\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"install-hugo\"\u003e\u003cstrong\u003eInstall Hugo\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVerify installation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-create-hugo-blog\"\u003e🎯 Create Hugo Blog\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir blog \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInitialize Git:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-choose--add-theme\"\u003e🎨 Choose \u0026amp; Add Theme\u003c/h2\u003e\n\u003cp\u003eRecommended \u003ccode\u003ePaperMod\u003c/code\u003e theme:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEdit \u003ccode\u003econfig.toml\u003c/code\u003e, add:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etheme\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaperMod\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ebaseURL\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://yuuniji.us.kg\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-write-blog-posts\"\u003e📝 Write Blog Posts\u003c/h2\u003e\n\u003cp\u003eCreate your first post:\u003c/p\u003e","title":"Building My Blog: From Scratch to Online"},{"content":"Hi, I\u0026rsquo;m Chak Way Yip 👋 Python \u0026amp; Web Developer | Exploring Cloud Computing | Tech Enthusiast\n🚀 Passionate about coding and open source 📖 Sharing knowledge through my blog 🎯 Always learning and improving 📫 Contact me:\nGitHub: github.com/yuuniji Email: yzw.beast@gmail.com Stay curious, keep building! 🚀\n","permalink":"https://yuuniji.us.kg/en/about/","summary":"\u003ch2 id=\"hi-im-chak-way-yip-\"\u003eHi, I\u0026rsquo;m Chak Way Yip 👋\u003c/h2\u003e\n\u003cp\u003ePython \u0026amp; Web Developer | Exploring Cloud Computing | Tech Enthusiast\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🚀 Passionate about coding and open source\u003c/li\u003e\n\u003cli\u003e📖 Sharing knowledge through my blog\u003c/li\u003e\n\u003cli\u003e🎯 Always learning and improving\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e📫 Contact me:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/yuuniji\"\u003egithub.com/yuuniji\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEmail: \u003ca href=\"mailto:yzw.beast@gmail.com\"\u003eyzw.beast@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStay curious, keep building! 🚀\u003c/p\u003e","title":"About Me"}]